// amm_master_qsys_with_pcie_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.02.23.22:37:42

`timescale 1 ps / 1 ps
module amm_master_qsys_with_pcie_mm_interconnect_0 (
		input  wire        pcie_ip_pcie_core_clk_clk,                                 //                               pcie_ip_pcie_core_clk.clk
		input  wire        pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset, // pcie_ip_bar2_translator_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_reset_reset_bridge_in_reset_reset,                   //                   sgdma_reset_reset_bridge_in_reset.reset
		input  wire [31:0] pcie_ip_bar2_address,                                      //                                        pcie_ip_bar2.address
		output wire        pcie_ip_bar2_waitrequest,                                  //                                                    .waitrequest
		input  wire [6:0]  pcie_ip_bar2_burstcount,                                   //                                                    .burstcount
		input  wire [7:0]  pcie_ip_bar2_byteenable,                                   //                                                    .byteenable
		input  wire        pcie_ip_bar2_read,                                         //                                                    .read
		output wire [63:0] pcie_ip_bar2_readdata,                                     //                                                    .readdata
		output wire        pcie_ip_bar2_readdatavalid,                                //                                                    .readdatavalid
		input  wire        pcie_ip_bar2_write,                                        //                                                    .write
		input  wire [63:0] pcie_ip_bar2_writedata,                                    //                                                    .writedata
		output wire [11:0] pcie_ip_cra_address,                                       //                                         pcie_ip_cra.address
		output wire        pcie_ip_cra_write,                                         //                                                    .write
		output wire        pcie_ip_cra_read,                                          //                                                    .read
		input  wire [31:0] pcie_ip_cra_readdata,                                      //                                                    .readdata
		output wire [31:0] pcie_ip_cra_writedata,                                     //                                                    .writedata
		output wire [3:0]  pcie_ip_cra_byteenable,                                    //                                                    .byteenable
		input  wire        pcie_ip_cra_waitrequest,                                   //                                                    .waitrequest
		output wire        pcie_ip_cra_chipselect,                                    //                                                    .chipselect
		output wire [3:0]  sgdma_csr_address,                                         //                                           sgdma_csr.address
		output wire        sgdma_csr_write,                                           //                                                    .write
		output wire        sgdma_csr_read,                                            //                                                    .read
		input  wire [31:0] sgdma_csr_readdata,                                        //                                                    .readdata
		output wire [31:0] sgdma_csr_writedata,                                       //                                                    .writedata
		output wire        sgdma_csr_chipselect                                       //                                                    .chipselect
	);

	wire          pcie_ip_bar2_translator_avalon_universal_master_0_waitrequest;   // pcie_ip_bar2_agent:av_waitrequest -> pcie_ip_bar2_translator:uav_waitrequest
	wire    [9:0] pcie_ip_bar2_translator_avalon_universal_master_0_burstcount;    // pcie_ip_bar2_translator:uav_burstcount -> pcie_ip_bar2_agent:av_burstcount
	wire   [63:0] pcie_ip_bar2_translator_avalon_universal_master_0_writedata;     // pcie_ip_bar2_translator:uav_writedata -> pcie_ip_bar2_agent:av_writedata
	wire   [31:0] pcie_ip_bar2_translator_avalon_universal_master_0_address;       // pcie_ip_bar2_translator:uav_address -> pcie_ip_bar2_agent:av_address
	wire          pcie_ip_bar2_translator_avalon_universal_master_0_lock;          // pcie_ip_bar2_translator:uav_lock -> pcie_ip_bar2_agent:av_lock
	wire          pcie_ip_bar2_translator_avalon_universal_master_0_write;         // pcie_ip_bar2_translator:uav_write -> pcie_ip_bar2_agent:av_write
	wire          pcie_ip_bar2_translator_avalon_universal_master_0_read;          // pcie_ip_bar2_translator:uav_read -> pcie_ip_bar2_agent:av_read
	wire   [63:0] pcie_ip_bar2_translator_avalon_universal_master_0_readdata;      // pcie_ip_bar2_agent:av_readdata -> pcie_ip_bar2_translator:uav_readdata
	wire          pcie_ip_bar2_translator_avalon_universal_master_0_debugaccess;   // pcie_ip_bar2_translator:uav_debugaccess -> pcie_ip_bar2_agent:av_debugaccess
	wire    [7:0] pcie_ip_bar2_translator_avalon_universal_master_0_byteenable;    // pcie_ip_bar2_translator:uav_byteenable -> pcie_ip_bar2_agent:av_byteenable
	wire          pcie_ip_bar2_translator_avalon_universal_master_0_readdatavalid; // pcie_ip_bar2_agent:av_readdatavalid -> pcie_ip_bar2_translator:uav_readdatavalid
	wire          sgdma_csr_agent_m0_waitrequest;                                  // sgdma_csr_translator:uav_waitrequest -> sgdma_csr_agent:m0_waitrequest
	wire    [2:0] sgdma_csr_agent_m0_burstcount;                                   // sgdma_csr_agent:m0_burstcount -> sgdma_csr_translator:uav_burstcount
	wire   [31:0] sgdma_csr_agent_m0_writedata;                                    // sgdma_csr_agent:m0_writedata -> sgdma_csr_translator:uav_writedata
	wire   [31:0] sgdma_csr_agent_m0_address;                                      // sgdma_csr_agent:m0_address -> sgdma_csr_translator:uav_address
	wire          sgdma_csr_agent_m0_write;                                        // sgdma_csr_agent:m0_write -> sgdma_csr_translator:uav_write
	wire          sgdma_csr_agent_m0_lock;                                         // sgdma_csr_agent:m0_lock -> sgdma_csr_translator:uav_lock
	wire          sgdma_csr_agent_m0_read;                                         // sgdma_csr_agent:m0_read -> sgdma_csr_translator:uav_read
	wire   [31:0] sgdma_csr_agent_m0_readdata;                                     // sgdma_csr_translator:uav_readdata -> sgdma_csr_agent:m0_readdata
	wire          sgdma_csr_agent_m0_readdatavalid;                                // sgdma_csr_translator:uav_readdatavalid -> sgdma_csr_agent:m0_readdatavalid
	wire          sgdma_csr_agent_m0_debugaccess;                                  // sgdma_csr_agent:m0_debugaccess -> sgdma_csr_translator:uav_debugaccess
	wire    [3:0] sgdma_csr_agent_m0_byteenable;                                   // sgdma_csr_agent:m0_byteenable -> sgdma_csr_translator:uav_byteenable
	wire          sgdma_csr_agent_rf_source_endofpacket;                           // sgdma_csr_agent:rf_source_endofpacket -> sgdma_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_csr_agent_rf_source_valid;                                 // sgdma_csr_agent:rf_source_valid -> sgdma_csr_agent_rsp_fifo:in_valid
	wire          sgdma_csr_agent_rf_source_startofpacket;                         // sgdma_csr_agent:rf_source_startofpacket -> sgdma_csr_agent_rsp_fifo:in_startofpacket
	wire  [109:0] sgdma_csr_agent_rf_source_data;                                  // sgdma_csr_agent:rf_source_data -> sgdma_csr_agent_rsp_fifo:in_data
	wire          sgdma_csr_agent_rf_source_ready;                                 // sgdma_csr_agent_rsp_fifo:in_ready -> sgdma_csr_agent:rf_source_ready
	wire          sgdma_csr_agent_rsp_fifo_out_endofpacket;                        // sgdma_csr_agent_rsp_fifo:out_endofpacket -> sgdma_csr_agent:rf_sink_endofpacket
	wire          sgdma_csr_agent_rsp_fifo_out_valid;                              // sgdma_csr_agent_rsp_fifo:out_valid -> sgdma_csr_agent:rf_sink_valid
	wire          sgdma_csr_agent_rsp_fifo_out_startofpacket;                      // sgdma_csr_agent_rsp_fifo:out_startofpacket -> sgdma_csr_agent:rf_sink_startofpacket
	wire  [109:0] sgdma_csr_agent_rsp_fifo_out_data;                               // sgdma_csr_agent_rsp_fifo:out_data -> sgdma_csr_agent:rf_sink_data
	wire          sgdma_csr_agent_rsp_fifo_out_ready;                              // sgdma_csr_agent:rf_sink_ready -> sgdma_csr_agent_rsp_fifo:out_ready
	wire          sgdma_csr_agent_rdata_fifo_src_valid;                            // sgdma_csr_agent:rdata_fifo_src_valid -> sgdma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] sgdma_csr_agent_rdata_fifo_src_data;                             // sgdma_csr_agent:rdata_fifo_src_data -> sgdma_csr_agent:rdata_fifo_sink_data
	wire          sgdma_csr_agent_rdata_fifo_src_ready;                            // sgdma_csr_agent:rdata_fifo_sink_ready -> sgdma_csr_agent:rdata_fifo_src_ready
	wire          pcie_ip_cra_agent_m0_waitrequest;                                // pcie_ip_cra_translator:uav_waitrequest -> pcie_ip_cra_agent:m0_waitrequest
	wire    [2:0] pcie_ip_cra_agent_m0_burstcount;                                 // pcie_ip_cra_agent:m0_burstcount -> pcie_ip_cra_translator:uav_burstcount
	wire   [31:0] pcie_ip_cra_agent_m0_writedata;                                  // pcie_ip_cra_agent:m0_writedata -> pcie_ip_cra_translator:uav_writedata
	wire   [31:0] pcie_ip_cra_agent_m0_address;                                    // pcie_ip_cra_agent:m0_address -> pcie_ip_cra_translator:uav_address
	wire          pcie_ip_cra_agent_m0_write;                                      // pcie_ip_cra_agent:m0_write -> pcie_ip_cra_translator:uav_write
	wire          pcie_ip_cra_agent_m0_lock;                                       // pcie_ip_cra_agent:m0_lock -> pcie_ip_cra_translator:uav_lock
	wire          pcie_ip_cra_agent_m0_read;                                       // pcie_ip_cra_agent:m0_read -> pcie_ip_cra_translator:uav_read
	wire   [31:0] pcie_ip_cra_agent_m0_readdata;                                   // pcie_ip_cra_translator:uav_readdata -> pcie_ip_cra_agent:m0_readdata
	wire          pcie_ip_cra_agent_m0_readdatavalid;                              // pcie_ip_cra_translator:uav_readdatavalid -> pcie_ip_cra_agent:m0_readdatavalid
	wire          pcie_ip_cra_agent_m0_debugaccess;                                // pcie_ip_cra_agent:m0_debugaccess -> pcie_ip_cra_translator:uav_debugaccess
	wire    [3:0] pcie_ip_cra_agent_m0_byteenable;                                 // pcie_ip_cra_agent:m0_byteenable -> pcie_ip_cra_translator:uav_byteenable
	wire          pcie_ip_cra_agent_rf_source_endofpacket;                         // pcie_ip_cra_agent:rf_source_endofpacket -> pcie_ip_cra_agent_rsp_fifo:in_endofpacket
	wire          pcie_ip_cra_agent_rf_source_valid;                               // pcie_ip_cra_agent:rf_source_valid -> pcie_ip_cra_agent_rsp_fifo:in_valid
	wire          pcie_ip_cra_agent_rf_source_startofpacket;                       // pcie_ip_cra_agent:rf_source_startofpacket -> pcie_ip_cra_agent_rsp_fifo:in_startofpacket
	wire  [109:0] pcie_ip_cra_agent_rf_source_data;                                // pcie_ip_cra_agent:rf_source_data -> pcie_ip_cra_agent_rsp_fifo:in_data
	wire          pcie_ip_cra_agent_rf_source_ready;                               // pcie_ip_cra_agent_rsp_fifo:in_ready -> pcie_ip_cra_agent:rf_source_ready
	wire          pcie_ip_cra_agent_rsp_fifo_out_endofpacket;                      // pcie_ip_cra_agent_rsp_fifo:out_endofpacket -> pcie_ip_cra_agent:rf_sink_endofpacket
	wire          pcie_ip_cra_agent_rsp_fifo_out_valid;                            // pcie_ip_cra_agent_rsp_fifo:out_valid -> pcie_ip_cra_agent:rf_sink_valid
	wire          pcie_ip_cra_agent_rsp_fifo_out_startofpacket;                    // pcie_ip_cra_agent_rsp_fifo:out_startofpacket -> pcie_ip_cra_agent:rf_sink_startofpacket
	wire  [109:0] pcie_ip_cra_agent_rsp_fifo_out_data;                             // pcie_ip_cra_agent_rsp_fifo:out_data -> pcie_ip_cra_agent:rf_sink_data
	wire          pcie_ip_cra_agent_rsp_fifo_out_ready;                            // pcie_ip_cra_agent:rf_sink_ready -> pcie_ip_cra_agent_rsp_fifo:out_ready
	wire          pcie_ip_cra_agent_rdata_fifo_src_valid;                          // pcie_ip_cra_agent:rdata_fifo_src_valid -> pcie_ip_cra_agent:rdata_fifo_sink_valid
	wire   [33:0] pcie_ip_cra_agent_rdata_fifo_src_data;                           // pcie_ip_cra_agent:rdata_fifo_src_data -> pcie_ip_cra_agent:rdata_fifo_sink_data
	wire          pcie_ip_cra_agent_rdata_fifo_src_ready;                          // pcie_ip_cra_agent:rdata_fifo_sink_ready -> pcie_ip_cra_agent:rdata_fifo_src_ready
	wire          pcie_ip_bar2_agent_cp_endofpacket;                               // pcie_ip_bar2_agent:cp_endofpacket -> router:sink_endofpacket
	wire          pcie_ip_bar2_agent_cp_valid;                                     // pcie_ip_bar2_agent:cp_valid -> router:sink_valid
	wire          pcie_ip_bar2_agent_cp_startofpacket;                             // pcie_ip_bar2_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [144:0] pcie_ip_bar2_agent_cp_data;                                      // pcie_ip_bar2_agent:cp_data -> router:sink_data
	wire          pcie_ip_bar2_agent_cp_ready;                                     // router:sink_ready -> pcie_ip_bar2_agent:cp_ready
	wire          sgdma_csr_agent_rp_endofpacket;                                  // sgdma_csr_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_csr_agent_rp_valid;                                        // sgdma_csr_agent:rp_valid -> router_001:sink_valid
	wire          sgdma_csr_agent_rp_startofpacket;                                // sgdma_csr_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [108:0] sgdma_csr_agent_rp_data;                                         // sgdma_csr_agent:rp_data -> router_001:sink_data
	wire          sgdma_csr_agent_rp_ready;                                        // router_001:sink_ready -> sgdma_csr_agent:rp_ready
	wire          pcie_ip_cra_agent_rp_endofpacket;                                // pcie_ip_cra_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          pcie_ip_cra_agent_rp_valid;                                      // pcie_ip_cra_agent:rp_valid -> router_002:sink_valid
	wire          pcie_ip_cra_agent_rp_startofpacket;                              // pcie_ip_cra_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [108:0] pcie_ip_cra_agent_rp_data;                                       // pcie_ip_cra_agent:rp_data -> router_002:sink_data
	wire          pcie_ip_cra_agent_rp_ready;                                      // router_002:sink_ready -> pcie_ip_cra_agent:rp_ready
	wire          router_src_endofpacket;                                          // router:src_endofpacket -> pcie_ip_bar2_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                // router:src_valid -> pcie_ip_bar2_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                        // router:src_startofpacket -> pcie_ip_bar2_limiter:cmd_sink_startofpacket
	wire  [144:0] router_src_data;                                                 // router:src_data -> pcie_ip_bar2_limiter:cmd_sink_data
	wire    [1:0] router_src_channel;                                              // router:src_channel -> pcie_ip_bar2_limiter:cmd_sink_channel
	wire          router_src_ready;                                                // pcie_ip_bar2_limiter:cmd_sink_ready -> router:src_ready
	wire          pcie_ip_bar2_limiter_cmd_src_endofpacket;                        // pcie_ip_bar2_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          pcie_ip_bar2_limiter_cmd_src_startofpacket;                      // pcie_ip_bar2_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [144:0] pcie_ip_bar2_limiter_cmd_src_data;                               // pcie_ip_bar2_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [1:0] pcie_ip_bar2_limiter_cmd_src_channel;                            // pcie_ip_bar2_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pcie_ip_bar2_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pcie_ip_bar2_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                         // rsp_mux:src_endofpacket -> pcie_ip_bar2_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                               // rsp_mux:src_valid -> pcie_ip_bar2_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                       // rsp_mux:src_startofpacket -> pcie_ip_bar2_limiter:rsp_sink_startofpacket
	wire  [144:0] rsp_mux_src_data;                                                // rsp_mux:src_data -> pcie_ip_bar2_limiter:rsp_sink_data
	wire    [1:0] rsp_mux_src_channel;                                             // rsp_mux:src_channel -> pcie_ip_bar2_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                               // pcie_ip_bar2_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          pcie_ip_bar2_limiter_rsp_src_endofpacket;                        // pcie_ip_bar2_limiter:rsp_src_endofpacket -> pcie_ip_bar2_agent:rp_endofpacket
	wire          pcie_ip_bar2_limiter_rsp_src_valid;                              // pcie_ip_bar2_limiter:rsp_src_valid -> pcie_ip_bar2_agent:rp_valid
	wire          pcie_ip_bar2_limiter_rsp_src_startofpacket;                      // pcie_ip_bar2_limiter:rsp_src_startofpacket -> pcie_ip_bar2_agent:rp_startofpacket
	wire  [144:0] pcie_ip_bar2_limiter_rsp_src_data;                               // pcie_ip_bar2_limiter:rsp_src_data -> pcie_ip_bar2_agent:rp_data
	wire    [1:0] pcie_ip_bar2_limiter_rsp_src_channel;                            // pcie_ip_bar2_limiter:rsp_src_channel -> pcie_ip_bar2_agent:rp_channel
	wire          pcie_ip_bar2_limiter_rsp_src_ready;                              // pcie_ip_bar2_agent:rp_ready -> pcie_ip_bar2_limiter:rsp_src_ready
	wire          sgdma_csr_burst_adapter_source0_endofpacket;                     // sgdma_csr_burst_adapter:source0_endofpacket -> sgdma_csr_agent:cp_endofpacket
	wire          sgdma_csr_burst_adapter_source0_valid;                           // sgdma_csr_burst_adapter:source0_valid -> sgdma_csr_agent:cp_valid
	wire          sgdma_csr_burst_adapter_source0_startofpacket;                   // sgdma_csr_burst_adapter:source0_startofpacket -> sgdma_csr_agent:cp_startofpacket
	wire  [108:0] sgdma_csr_burst_adapter_source0_data;                            // sgdma_csr_burst_adapter:source0_data -> sgdma_csr_agent:cp_data
	wire          sgdma_csr_burst_adapter_source0_ready;                           // sgdma_csr_agent:cp_ready -> sgdma_csr_burst_adapter:source0_ready
	wire    [1:0] sgdma_csr_burst_adapter_source0_channel;                         // sgdma_csr_burst_adapter:source0_channel -> sgdma_csr_agent:cp_channel
	wire          pcie_ip_cra_burst_adapter_source0_endofpacket;                   // pcie_ip_cra_burst_adapter:source0_endofpacket -> pcie_ip_cra_agent:cp_endofpacket
	wire          pcie_ip_cra_burst_adapter_source0_valid;                         // pcie_ip_cra_burst_adapter:source0_valid -> pcie_ip_cra_agent:cp_valid
	wire          pcie_ip_cra_burst_adapter_source0_startofpacket;                 // pcie_ip_cra_burst_adapter:source0_startofpacket -> pcie_ip_cra_agent:cp_startofpacket
	wire  [108:0] pcie_ip_cra_burst_adapter_source0_data;                          // pcie_ip_cra_burst_adapter:source0_data -> pcie_ip_cra_agent:cp_data
	wire          pcie_ip_cra_burst_adapter_source0_ready;                         // pcie_ip_cra_agent:cp_ready -> pcie_ip_cra_burst_adapter:source0_ready
	wire    [1:0] pcie_ip_cra_burst_adapter_source0_channel;                       // pcie_ip_cra_burst_adapter:source0_channel -> pcie_ip_cra_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [144:0] cmd_demux_src0_data;                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [1:0] cmd_demux_src0_channel;                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [144:0] cmd_demux_src1_data;                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [1:0] cmd_demux_src1_channel;                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          rsp_demux_src0_endofpacket;                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [144:0] rsp_demux_src0_data;                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [1:0] rsp_demux_src0_channel;                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_001_src0_endofpacket;                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [144:0] rsp_demux_001_src0_data;                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [1:0] rsp_demux_001_src0_channel;                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          router_001_src_endofpacket;                                      // router_001:src_endofpacket -> sgdma_csr_rsp_width_adapter:in_endofpacket
	wire          router_001_src_valid;                                            // router_001:src_valid -> sgdma_csr_rsp_width_adapter:in_valid
	wire          router_001_src_startofpacket;                                    // router_001:src_startofpacket -> sgdma_csr_rsp_width_adapter:in_startofpacket
	wire  [108:0] router_001_src_data;                                             // router_001:src_data -> sgdma_csr_rsp_width_adapter:in_data
	wire    [1:0] router_001_src_channel;                                          // router_001:src_channel -> sgdma_csr_rsp_width_adapter:in_channel
	wire          router_001_src_ready;                                            // sgdma_csr_rsp_width_adapter:in_ready -> router_001:src_ready
	wire          sgdma_csr_rsp_width_adapter_src_endofpacket;                     // sgdma_csr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          sgdma_csr_rsp_width_adapter_src_valid;                           // sgdma_csr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire          sgdma_csr_rsp_width_adapter_src_startofpacket;                   // sgdma_csr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire  [144:0] sgdma_csr_rsp_width_adapter_src_data;                            // sgdma_csr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sgdma_csr_rsp_width_adapter_src_ready;                           // rsp_demux:sink_ready -> sgdma_csr_rsp_width_adapter:out_ready
	wire    [1:0] sgdma_csr_rsp_width_adapter_src_channel;                         // sgdma_csr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          router_002_src_endofpacket;                                      // router_002:src_endofpacket -> pcie_ip_cra_rsp_width_adapter:in_endofpacket
	wire          router_002_src_valid;                                            // router_002:src_valid -> pcie_ip_cra_rsp_width_adapter:in_valid
	wire          router_002_src_startofpacket;                                    // router_002:src_startofpacket -> pcie_ip_cra_rsp_width_adapter:in_startofpacket
	wire  [108:0] router_002_src_data;                                             // router_002:src_data -> pcie_ip_cra_rsp_width_adapter:in_data
	wire    [1:0] router_002_src_channel;                                          // router_002:src_channel -> pcie_ip_cra_rsp_width_adapter:in_channel
	wire          router_002_src_ready;                                            // pcie_ip_cra_rsp_width_adapter:in_ready -> router_002:src_ready
	wire          pcie_ip_cra_rsp_width_adapter_src_endofpacket;                   // pcie_ip_cra_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pcie_ip_cra_rsp_width_adapter_src_valid;                         // pcie_ip_cra_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire          pcie_ip_cra_rsp_width_adapter_src_startofpacket;                 // pcie_ip_cra_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [144:0] pcie_ip_cra_rsp_width_adapter_src_data;                          // pcie_ip_cra_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          pcie_ip_cra_rsp_width_adapter_src_ready;                         // rsp_demux_001:sink_ready -> pcie_ip_cra_rsp_width_adapter:out_ready
	wire    [1:0] pcie_ip_cra_rsp_width_adapter_src_channel;                       // pcie_ip_cra_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          cmd_mux_src_endofpacket;                                         // cmd_mux:src_endofpacket -> sgdma_csr_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_src_valid;                                               // cmd_mux:src_valid -> sgdma_csr_cmd_width_adapter:in_valid
	wire          cmd_mux_src_startofpacket;                                       // cmd_mux:src_startofpacket -> sgdma_csr_cmd_width_adapter:in_startofpacket
	wire  [144:0] cmd_mux_src_data;                                                // cmd_mux:src_data -> sgdma_csr_cmd_width_adapter:in_data
	wire    [1:0] cmd_mux_src_channel;                                             // cmd_mux:src_channel -> sgdma_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_ready;                                               // sgdma_csr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire          sgdma_csr_cmd_width_adapter_src_endofpacket;                     // sgdma_csr_cmd_width_adapter:out_endofpacket -> sgdma_csr_burst_adapter:sink0_endofpacket
	wire          sgdma_csr_cmd_width_adapter_src_valid;                           // sgdma_csr_cmd_width_adapter:out_valid -> sgdma_csr_burst_adapter:sink0_valid
	wire          sgdma_csr_cmd_width_adapter_src_startofpacket;                   // sgdma_csr_cmd_width_adapter:out_startofpacket -> sgdma_csr_burst_adapter:sink0_startofpacket
	wire  [108:0] sgdma_csr_cmd_width_adapter_src_data;                            // sgdma_csr_cmd_width_adapter:out_data -> sgdma_csr_burst_adapter:sink0_data
	wire          sgdma_csr_cmd_width_adapter_src_ready;                           // sgdma_csr_burst_adapter:sink0_ready -> sgdma_csr_cmd_width_adapter:out_ready
	wire    [1:0] sgdma_csr_cmd_width_adapter_src_channel;                         // sgdma_csr_cmd_width_adapter:out_channel -> sgdma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_endofpacket;                                     // cmd_mux_001:src_endofpacket -> pcie_ip_cra_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_001_src_valid;                                           // cmd_mux_001:src_valid -> pcie_ip_cra_cmd_width_adapter:in_valid
	wire          cmd_mux_001_src_startofpacket;                                   // cmd_mux_001:src_startofpacket -> pcie_ip_cra_cmd_width_adapter:in_startofpacket
	wire  [144:0] cmd_mux_001_src_data;                                            // cmd_mux_001:src_data -> pcie_ip_cra_cmd_width_adapter:in_data
	wire    [1:0] cmd_mux_001_src_channel;                                         // cmd_mux_001:src_channel -> pcie_ip_cra_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_ready;                                           // pcie_ip_cra_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire          pcie_ip_cra_cmd_width_adapter_src_endofpacket;                   // pcie_ip_cra_cmd_width_adapter:out_endofpacket -> pcie_ip_cra_burst_adapter:sink0_endofpacket
	wire          pcie_ip_cra_cmd_width_adapter_src_valid;                         // pcie_ip_cra_cmd_width_adapter:out_valid -> pcie_ip_cra_burst_adapter:sink0_valid
	wire          pcie_ip_cra_cmd_width_adapter_src_startofpacket;                 // pcie_ip_cra_cmd_width_adapter:out_startofpacket -> pcie_ip_cra_burst_adapter:sink0_startofpacket
	wire  [108:0] pcie_ip_cra_cmd_width_adapter_src_data;                          // pcie_ip_cra_cmd_width_adapter:out_data -> pcie_ip_cra_burst_adapter:sink0_data
	wire          pcie_ip_cra_cmd_width_adapter_src_ready;                         // pcie_ip_cra_burst_adapter:sink0_ready -> pcie_ip_cra_cmd_width_adapter:out_ready
	wire    [1:0] pcie_ip_cra_cmd_width_adapter_src_channel;                       // pcie_ip_cra_cmd_width_adapter:out_channel -> pcie_ip_cra_burst_adapter:sink0_channel
	wire    [1:0] pcie_ip_bar2_limiter_cmd_valid_data;                             // pcie_ip_bar2_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_ip_bar2_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                       //                       clk.clk
		.reset                    (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (pcie_ip_bar2_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcie_ip_bar2_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcie_ip_bar2_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcie_ip_bar2_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcie_ip_bar2_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcie_ip_bar2_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcie_ip_bar2_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcie_ip_bar2_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcie_ip_bar2_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcie_ip_bar2_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcie_ip_bar2_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcie_ip_bar2_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcie_ip_bar2_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcie_ip_bar2_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcie_ip_bar2_byteenable),                                         //                          .byteenable
		.av_read                  (pcie_ip_bar2_read),                                               //                          .read
		.av_readdata              (pcie_ip_bar2_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcie_ip_bar2_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcie_ip_bar2_write),                                              //                          .write
		.av_writedata             (pcie_ip_bar2_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                            //               (terminated)
		.av_lock                  (1'b0),                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                            //               (terminated)
		.uav_clken                (),                                                                //               (terminated)
		.av_clken                 (1'b1),                                                            //               (terminated)
		.uav_response             (2'b00),                                                           //               (terminated)
		.av_response              (),                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_csr_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),               //                      clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sgdma_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (sgdma_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (sgdma_csr_agent_m0_read),                 //                         .read
		.uav_write                (sgdma_csr_agent_m0_write),                //                         .write
		.uav_waitrequest          (sgdma_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (sgdma_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (sgdma_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (sgdma_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (sgdma_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (sgdma_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (sgdma_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (sgdma_csr_address),                       //      avalon_anti_slave_0.address
		.av_write                 (sgdma_csr_write),                         //                         .write
		.av_read                  (sgdma_csr_read),                          //                         .read
		.av_readdata              (sgdma_csr_readdata),                      //                         .readdata
		.av_writedata             (sgdma_csr_writedata),                     //                         .writedata
		.av_chipselect            (sgdma_csr_chipselect),                    //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_ip_cra_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                 //                      clk.clk
		.reset                    (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pcie_ip_cra_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount           (pcie_ip_cra_agent_m0_burstcount),                           //                         .burstcount
		.uav_read                 (pcie_ip_cra_agent_m0_read),                                 //                         .read
		.uav_write                (pcie_ip_cra_agent_m0_write),                                //                         .write
		.uav_waitrequest          (pcie_ip_cra_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid        (pcie_ip_cra_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable           (pcie_ip_cra_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata             (pcie_ip_cra_agent_m0_readdata),                             //                         .readdata
		.uav_writedata            (pcie_ip_cra_agent_m0_writedata),                            //                         .writedata
		.uav_lock                 (pcie_ip_cra_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess          (pcie_ip_cra_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address               (pcie_ip_cra_address),                                       //      avalon_anti_slave_0.address
		.av_write                 (pcie_ip_cra_write),                                         //                         .write
		.av_read                  (pcie_ip_cra_read),                                          //                         .read
		.av_readdata              (pcie_ip_cra_readdata),                                      //                         .readdata
		.av_writedata             (pcie_ip_cra_writedata),                                     //                         .writedata
		.av_byteenable            (pcie_ip_cra_byteenable),                                    //                         .byteenable
		.av_waitrequest           (pcie_ip_cra_waitrequest),                                   //                         .waitrequest
		.av_chipselect            (pcie_ip_cra_chipselect),                                    //                         .chipselect
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BEGIN_BURST           (128),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (130),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (131),
		.PKT_THREAD_ID_H           (132),
		.PKT_THREAD_ID_L           (132),
		.PKT_CACHE_H               (139),
		.PKT_CACHE_L               (136),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_ORI_BURST_SIZE_H      (144),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_bar2_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                   (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address              (pcie_ip_bar2_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcie_ip_bar2_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcie_ip_bar2_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcie_ip_bar2_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcie_ip_bar2_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcie_ip_bar2_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcie_ip_bar2_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcie_ip_bar2_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcie_ip_bar2_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcie_ip_bar2_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcie_ip_bar2_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcie_ip_bar2_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcie_ip_bar2_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcie_ip_bar2_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcie_ip_bar2_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcie_ip_bar2_agent_cp_ready),                                     //          .ready
		.rp_valid                (pcie_ip_bar2_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (pcie_ip_bar2_limiter_rsp_src_data),                               //          .data
		.rp_channel              (pcie_ip_bar2_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (pcie_ip_bar2_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (pcie_ip_bar2_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (pcie_ip_bar2_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (95),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_csr_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                     //             clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sgdma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sgdma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sgdma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sgdma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sgdma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (sgdma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sgdma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sgdma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (sgdma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sgdma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (sgdma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (sgdma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sgdma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (sgdma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (sgdma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (sgdma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sgdma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sgdma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sgdma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sgdma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sgdma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sgdma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sgdma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sgdma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sgdma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sgdma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sgdma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sgdma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sgdma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sgdma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sgdma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sgdma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sgdma_csr_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sgdma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (sgdma_csr_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (sgdma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sgdma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_csr_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset             (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sgdma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (95),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_cra_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                 //             clk.clk
		.reset                   (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcie_ip_cra_agent_m0_address),                              //              m0.address
		.m0_burstcount           (pcie_ip_cra_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (pcie_ip_cra_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (pcie_ip_cra_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (pcie_ip_cra_agent_m0_lock),                                 //                .lock
		.m0_readdata             (pcie_ip_cra_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (pcie_ip_cra_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (pcie_ip_cra_agent_m0_read),                                 //                .read
		.m0_waitrequest          (pcie_ip_cra_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (pcie_ip_cra_agent_m0_writedata),                            //                .writedata
		.m0_write                (pcie_ip_cra_agent_m0_write),                                //                .write
		.rp_endofpacket          (pcie_ip_cra_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (pcie_ip_cra_agent_rp_ready),                                //                .ready
		.rp_valid                (pcie_ip_cra_agent_rp_valid),                                //                .valid
		.rp_data                 (pcie_ip_cra_agent_rp_data),                                 //                .data
		.rp_startofpacket        (pcie_ip_cra_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (pcie_ip_cra_burst_adapter_source0_ready),                   //              cp.ready
		.cp_valid                (pcie_ip_cra_burst_adapter_source0_valid),                   //                .valid
		.cp_data                 (pcie_ip_cra_burst_adapter_source0_data),                    //                .data
		.cp_startofpacket        (pcie_ip_cra_burst_adapter_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (pcie_ip_cra_burst_adapter_source0_endofpacket),             //                .endofpacket
		.cp_channel              (pcie_ip_cra_burst_adapter_source0_channel),                 //                .channel
		.rf_sink_ready           (pcie_ip_cra_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (pcie_ip_cra_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (pcie_ip_cra_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (pcie_ip_cra_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (pcie_ip_cra_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (pcie_ip_cra_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (pcie_ip_cra_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (pcie_ip_cra_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (pcie_ip_cra_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (pcie_ip_cra_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (pcie_ip_cra_agent_rdata_fifo_src_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pcie_ip_cra_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_sink_data    (pcie_ip_cra_agent_rdata_fifo_src_data),                     //                .data
		.rdata_fifo_src_ready    (pcie_ip_cra_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_ip_cra_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (pcie_ip_cra_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ip_cra_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset             (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ip_cra_agent_rf_source_data),                          //        in.data
		.in_valid          (pcie_ip_cra_agent_rf_source_valid),                         //          .valid
		.in_ready          (pcie_ip_cra_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (pcie_ip_cra_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (pcie_ip_cra_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (pcie_ip_cra_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (pcie_ip_cra_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (pcie_ip_cra_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (pcie_ip_cra_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (pcie_ip_cra_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_router router (
		.sink_ready         (pcie_ip_bar2_agent_cp_ready),                               //      sink.ready
		.sink_valid         (pcie_ip_bar2_agent_cp_valid),                               //          .valid
		.sink_data          (pcie_ip_bar2_agent_cp_data),                                //          .data
		.sink_startofpacket (pcie_ip_bar2_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_ip_bar2_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset              (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sgdma_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (sgdma_csr_agent_rp_valid),                //          .valid
		.sink_data          (sgdma_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (sgdma_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sgdma_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (pcie_ip_cra_agent_rp_ready),                                //      sink.ready
		.sink_valid         (pcie_ip_cra_agent_rp_valid),                                //          .valid
		.sink_data          (pcie_ip_cra_agent_rp_data),                                 //          .data
		.sink_startofpacket (pcie_ip_cra_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (pcie_ip_cra_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset              (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (131),
		.PKT_SRC_ID_H              (130),
		.PKT_SRC_ID_L              (130),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.REORDER                   (0)
	) pcie_ip_bar2_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset                  (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                          //          .valid
		.cmd_sink_data          (router_src_data),                                           //          .data
		.cmd_sink_channel       (router_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (pcie_ip_bar2_limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (pcie_ip_bar2_limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (pcie_ip_bar2_limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (pcie_ip_bar2_limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (pcie_ip_bar2_limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (pcie_ip_bar2_limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (pcie_ip_bar2_limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (pcie_ip_bar2_limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (pcie_ip_bar2_limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (pcie_ip_bar2_limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (pcie_ip_bar2_limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (pcie_ip_bar2_limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sgdma_csr_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                     //       cr0.clk
		.reset                 (sgdma_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (sgdma_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sgdma_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sgdma_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sgdma_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sgdma_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sgdma_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sgdma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sgdma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (sgdma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sgdma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sgdma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sgdma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pcie_ip_cra_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                 //       cr0.clk
		.reset                 (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (pcie_ip_cra_cmd_width_adapter_src_valid),                   //     sink0.valid
		.sink0_data            (pcie_ip_cra_cmd_width_adapter_src_data),                    //          .data
		.sink0_channel         (pcie_ip_cra_cmd_width_adapter_src_channel),                 //          .channel
		.sink0_startofpacket   (pcie_ip_cra_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.sink0_endofpacket     (pcie_ip_cra_cmd_width_adapter_src_endofpacket),             //          .endofpacket
		.sink0_ready           (pcie_ip_cra_cmd_width_adapter_src_ready),                   //          .ready
		.source0_valid         (pcie_ip_cra_burst_adapter_source0_valid),                   //   source0.valid
		.source0_data          (pcie_ip_cra_burst_adapter_source0_data),                    //          .data
		.source0_channel       (pcie_ip_cra_burst_adapter_source0_channel),                 //          .channel
		.source0_startofpacket (pcie_ip_cra_burst_adapter_source0_startofpacket),           //          .startofpacket
		.source0_endofpacket   (pcie_ip_cra_burst_adapter_source0_endofpacket),             //          .endofpacket
		.source0_ready         (pcie_ip_cra_burst_adapter_source0_ready)                    //          .ready
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),                                 //        clk.clk
		.reset              (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (pcie_ip_bar2_limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel       (pcie_ip_bar2_limiter_cmd_src_channel),                      //           .channel
		.sink_data          (pcie_ip_bar2_limiter_cmd_src_data),                         //           .data
		.sink_startofpacket (pcie_ip_bar2_limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket   (pcie_ip_bar2_limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid         (pcie_ip_bar2_limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                 //           .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset               (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                 //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (sgdma_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sgdma_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sgdma_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sgdma_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sgdma_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset              (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (pcie_ip_cra_rsp_width_adapter_src_ready),                   //      sink.ready
		.sink_channel       (pcie_ip_cra_rsp_width_adapter_src_channel),                 //          .channel
		.sink_data          (pcie_ip_cra_rsp_width_adapter_src_data),                    //          .data
		.sink_startofpacket (pcie_ip_cra_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pcie_ip_cra_rsp_width_adapter_src_endofpacket),             //          .endofpacket
		.sink_valid         (pcie_ip_cra_rsp_width_adapter_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                             //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset               (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //          .valid
		.src_data            (rsp_mux_src_data),                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                             //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_csr_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_001_src_valid),                          //      sink.valid
		.in_channel           (router_001_src_channel),                        //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_001_src_ready),                          //          .ready
		.in_data              (router_001_src_data),                           //          .data
		.out_endofpacket      (sgdma_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_cra_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset                (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                      //      sink.valid
		.in_channel           (router_002_src_channel),                                    //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_002_src_ready),                                      //          .ready
		.in_data              (router_002_src_data),                                       //          .data
		.out_endofpacket      (pcie_ip_cra_rsp_width_adapter_src_endofpacket),             //       src.endofpacket
		.out_data             (pcie_ip_cra_rsp_width_adapter_src_data),                    //          .data
		.out_channel          (pcie_ip_cra_rsp_width_adapter_src_channel),                 //          .channel
		.out_valid            (pcie_ip_cra_rsp_width_adapter_src_valid),                   //          .valid
		.out_ready            (pcie_ip_cra_rsp_width_adapter_src_ready),                   //          .ready
		.out_startofpacket    (pcie_ip_cra_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_csr_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                             //          .ready
		.in_data              (cmd_mux_src_data),                              //          .data
		.out_endofpacket      (sgdma_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_cra_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                 //       clk.clk
		.reset                (pcie_ip_bar2_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                     //          .ready
		.in_data              (cmd_mux_001_src_data),                                      //          .data
		.out_endofpacket      (pcie_ip_cra_cmd_width_adapter_src_endofpacket),             //       src.endofpacket
		.out_data             (pcie_ip_cra_cmd_width_adapter_src_data),                    //          .data
		.out_channel          (pcie_ip_cra_cmd_width_adapter_src_channel),                 //          .channel
		.out_valid            (pcie_ip_cra_cmd_width_adapter_src_valid),                   //          .valid
		.out_ready            (pcie_ip_cra_cmd_width_adapter_src_ready),                   //          .ready
		.out_startofpacket    (pcie_ip_cra_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

endmodule
