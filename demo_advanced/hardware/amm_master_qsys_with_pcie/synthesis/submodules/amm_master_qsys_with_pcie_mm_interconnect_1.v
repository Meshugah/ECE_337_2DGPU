// amm_master_qsys_with_pcie_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.02.23.22:38:36

`timescale 1 ps / 1 ps
module amm_master_qsys_with_pcie_mm_interconnect_1 (
		input  wire        clk_50_clk_clk,                                           //                                         clk_50_clk.clk
		input  wire        pcie_ip_pcie_core_clk_clk,                                //                              pcie_ip_pcie_core_clk.clk
		input  wire        pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset, // pcie_ip_txs_translator_reset_reset_bridge_in_reset.reset
		input  wire        sdram_reset_reset_bridge_in_reset_reset,                  //                  sdram_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_reset_reset_bridge_in_reset_reset,                  //                  sgdma_reset_reset_bridge_in_reset.reset
		input  wire        user_module_0_reset_reset_bridge_in_reset_reset,          //          user_module_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] sgdma_descriptor_read_address,                            //                              sgdma_descriptor_read.address
		output wire        sgdma_descriptor_read_waitrequest,                        //                                                   .waitrequest
		input  wire        sgdma_descriptor_read_read,                               //                                                   .read
		output wire [31:0] sgdma_descriptor_read_readdata,                           //                                                   .readdata
		output wire        sgdma_descriptor_read_readdatavalid,                      //                                                   .readdatavalid
		input  wire [31:0] sgdma_descriptor_write_address,                           //                             sgdma_descriptor_write.address
		output wire        sgdma_descriptor_write_waitrequest,                       //                                                   .waitrequest
		input  wire        sgdma_descriptor_write_write,                             //                                                   .write
		input  wire [31:0] sgdma_descriptor_write_writedata,                         //                                                   .writedata
		input  wire [31:0] sgdma_m_read_address,                                     //                                       sgdma_m_read.address
		output wire        sgdma_m_read_waitrequest,                                 //                                                   .waitrequest
		input  wire [3:0]  sgdma_m_read_burstcount,                                  //                                                   .burstcount
		input  wire        sgdma_m_read_read,                                        //                                                   .read
		output wire [63:0] sgdma_m_read_readdata,                                    //                                                   .readdata
		output wire        sgdma_m_read_readdatavalid,                               //                                                   .readdatavalid
		input  wire [31:0] sgdma_m_write_address,                                    //                                      sgdma_m_write.address
		output wire        sgdma_m_write_waitrequest,                                //                                                   .waitrequest
		input  wire [7:0]  sgdma_m_write_burstcount,                                 //                                                   .burstcount
		input  wire [7:0]  sgdma_m_write_byteenable,                                 //                                                   .byteenable
		input  wire        sgdma_m_write_write,                                      //                                                   .write
		input  wire [63:0] sgdma_m_write_writedata,                                  //                                                   .writedata
		input  wire [27:0] user_module_0_avalon_master_address,                      //                        user_module_0_avalon_master.address
		output wire        user_module_0_avalon_master_waitrequest,                  //                                                   .waitrequest
		input  wire        user_module_0_avalon_master_read,                         //                                                   .read
		output wire [31:0] user_module_0_avalon_master_readdata,                     //                                                   .readdata
		output wire        user_module_0_avalon_master_readdatavalid,                //                                                   .readdatavalid
		input  wire        user_module_0_avalon_master_write,                        //                                                   .write
		input  wire [31:0] user_module_0_avalon_master_writedata,                    //                                                   .writedata
		output wire [30:0] pcie_ip_txs_address,                                      //                                        pcie_ip_txs.address
		output wire        pcie_ip_txs_write,                                        //                                                   .write
		output wire        pcie_ip_txs_read,                                         //                                                   .read
		input  wire [63:0] pcie_ip_txs_readdata,                                     //                                                   .readdata
		output wire [63:0] pcie_ip_txs_writedata,                                    //                                                   .writedata
		output wire [6:0]  pcie_ip_txs_burstcount,                                   //                                                   .burstcount
		output wire [7:0]  pcie_ip_txs_byteenable,                                   //                                                   .byteenable
		input  wire        pcie_ip_txs_readdatavalid,                                //                                                   .readdatavalid
		input  wire        pcie_ip_txs_waitrequest,                                  //                                                   .waitrequest
		output wire        pcie_ip_txs_chipselect,                                   //                                                   .chipselect
		output wire [23:0] sdram_s1_address,                                         //                                           sdram_s1.address
		output wire        sdram_s1_write,                                           //                                                   .write
		output wire        sdram_s1_read,                                            //                                                   .read
		input  wire [31:0] sdram_s1_readdata,                                        //                                                   .readdata
		output wire [31:0] sdram_s1_writedata,                                       //                                                   .writedata
		output wire [3:0]  sdram_s1_byteenable,                                      //                                                   .byteenable
		input  wire        sdram_s1_readdatavalid,                                   //                                                   .readdatavalid
		input  wire        sdram_s1_waitrequest,                                     //                                                   .waitrequest
		output wire        sdram_s1_chipselect                                       //                                                   .chipselect
	);

	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest;         // sgdma_descriptor_read_agent:av_waitrequest -> sgdma_descriptor_read_translator:uav_waitrequest
	wire    [2:0] sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount;          // sgdma_descriptor_read_translator:uav_burstcount -> sgdma_descriptor_read_agent:av_burstcount
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_writedata;           // sgdma_descriptor_read_translator:uav_writedata -> sgdma_descriptor_read_agent:av_writedata
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_address;             // sgdma_descriptor_read_translator:uav_address -> sgdma_descriptor_read_agent:av_address
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_lock;                // sgdma_descriptor_read_translator:uav_lock -> sgdma_descriptor_read_agent:av_lock
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_write;               // sgdma_descriptor_read_translator:uav_write -> sgdma_descriptor_read_agent:av_write
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_read;                // sgdma_descriptor_read_translator:uav_read -> sgdma_descriptor_read_agent:av_read
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_readdata;            // sgdma_descriptor_read_agent:av_readdata -> sgdma_descriptor_read_translator:uav_readdata
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess;         // sgdma_descriptor_read_translator:uav_debugaccess -> sgdma_descriptor_read_agent:av_debugaccess
	wire    [3:0] sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable;          // sgdma_descriptor_read_translator:uav_byteenable -> sgdma_descriptor_read_agent:av_byteenable
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;       // sgdma_descriptor_read_agent:av_readdatavalid -> sgdma_descriptor_read_translator:uav_readdatavalid
	wire          rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> sgdma_descriptor_read_agent:rp_endofpacket
	wire          rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> sgdma_descriptor_read_agent:rp_valid
	wire          rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> sgdma_descriptor_read_agent:rp_startofpacket
	wire  [113:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> sgdma_descriptor_read_agent:rp_data
	wire    [4:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> sgdma_descriptor_read_agent:rp_channel
	wire          rsp_mux_src_ready;                                                              // sgdma_descriptor_read_agent:rp_ready -> rsp_mux:src_ready
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest;        // sgdma_descriptor_write_agent:av_waitrequest -> sgdma_descriptor_write_translator:uav_waitrequest
	wire    [2:0] sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount;         // sgdma_descriptor_write_translator:uav_burstcount -> sgdma_descriptor_write_agent:av_burstcount
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_writedata;          // sgdma_descriptor_write_translator:uav_writedata -> sgdma_descriptor_write_agent:av_writedata
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_address;            // sgdma_descriptor_write_translator:uav_address -> sgdma_descriptor_write_agent:av_address
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_lock;               // sgdma_descriptor_write_translator:uav_lock -> sgdma_descriptor_write_agent:av_lock
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_write;              // sgdma_descriptor_write_translator:uav_write -> sgdma_descriptor_write_agent:av_write
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_read;               // sgdma_descriptor_write_translator:uav_read -> sgdma_descriptor_write_agent:av_read
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_readdata;           // sgdma_descriptor_write_agent:av_readdata -> sgdma_descriptor_write_translator:uav_readdata
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess;        // sgdma_descriptor_write_translator:uav_debugaccess -> sgdma_descriptor_write_agent:av_debugaccess
	wire    [3:0] sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable;         // sgdma_descriptor_write_translator:uav_byteenable -> sgdma_descriptor_write_agent:av_byteenable
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid;      // sgdma_descriptor_write_agent:av_readdatavalid -> sgdma_descriptor_write_translator:uav_readdatavalid
	wire          rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> sgdma_descriptor_write_agent:rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> sgdma_descriptor_write_agent:rp_valid
	wire          rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> sgdma_descriptor_write_agent:rp_startofpacket
	wire  [113:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> sgdma_descriptor_write_agent:rp_data
	wire    [4:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> sgdma_descriptor_write_agent:rp_channel
	wire          rsp_mux_001_src_ready;                                                          // sgdma_descriptor_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire          sgdma_m_read_translator_avalon_universal_master_0_waitrequest;                  // sgdma_m_read_agent:av_waitrequest -> sgdma_m_read_translator:uav_waitrequest
	wire    [6:0] sgdma_m_read_translator_avalon_universal_master_0_burstcount;                   // sgdma_m_read_translator:uav_burstcount -> sgdma_m_read_agent:av_burstcount
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_writedata;                    // sgdma_m_read_translator:uav_writedata -> sgdma_m_read_agent:av_writedata
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_address;                      // sgdma_m_read_translator:uav_address -> sgdma_m_read_agent:av_address
	wire          sgdma_m_read_translator_avalon_universal_master_0_lock;                         // sgdma_m_read_translator:uav_lock -> sgdma_m_read_agent:av_lock
	wire          sgdma_m_read_translator_avalon_universal_master_0_write;                        // sgdma_m_read_translator:uav_write -> sgdma_m_read_agent:av_write
	wire          sgdma_m_read_translator_avalon_universal_master_0_read;                         // sgdma_m_read_translator:uav_read -> sgdma_m_read_agent:av_read
	wire   [63:0] sgdma_m_read_translator_avalon_universal_master_0_readdata;                     // sgdma_m_read_agent:av_readdata -> sgdma_m_read_translator:uav_readdata
	wire          sgdma_m_read_translator_avalon_universal_master_0_debugaccess;                  // sgdma_m_read_translator:uav_debugaccess -> sgdma_m_read_agent:av_debugaccess
	wire    [7:0] sgdma_m_read_translator_avalon_universal_master_0_byteenable;                   // sgdma_m_read_translator:uav_byteenable -> sgdma_m_read_agent:av_byteenable
	wire          sgdma_m_read_translator_avalon_universal_master_0_readdatavalid;                // sgdma_m_read_agent:av_readdatavalid -> sgdma_m_read_translator:uav_readdatavalid
	wire          sgdma_m_write_translator_avalon_universal_master_0_waitrequest;                 // sgdma_m_write_agent:av_waitrequest -> sgdma_m_write_translator:uav_waitrequest
	wire   [10:0] sgdma_m_write_translator_avalon_universal_master_0_burstcount;                  // sgdma_m_write_translator:uav_burstcount -> sgdma_m_write_agent:av_burstcount
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_writedata;                   // sgdma_m_write_translator:uav_writedata -> sgdma_m_write_agent:av_writedata
	wire   [31:0] sgdma_m_write_translator_avalon_universal_master_0_address;                     // sgdma_m_write_translator:uav_address -> sgdma_m_write_agent:av_address
	wire          sgdma_m_write_translator_avalon_universal_master_0_lock;                        // sgdma_m_write_translator:uav_lock -> sgdma_m_write_agent:av_lock
	wire          sgdma_m_write_translator_avalon_universal_master_0_write;                       // sgdma_m_write_translator:uav_write -> sgdma_m_write_agent:av_write
	wire          sgdma_m_write_translator_avalon_universal_master_0_read;                        // sgdma_m_write_translator:uav_read -> sgdma_m_write_agent:av_read
	wire   [63:0] sgdma_m_write_translator_avalon_universal_master_0_readdata;                    // sgdma_m_write_agent:av_readdata -> sgdma_m_write_translator:uav_readdata
	wire          sgdma_m_write_translator_avalon_universal_master_0_debugaccess;                 // sgdma_m_write_translator:uav_debugaccess -> sgdma_m_write_agent:av_debugaccess
	wire    [7:0] sgdma_m_write_translator_avalon_universal_master_0_byteenable;                  // sgdma_m_write_translator:uav_byteenable -> sgdma_m_write_agent:av_byteenable
	wire          sgdma_m_write_translator_avalon_universal_master_0_readdatavalid;               // sgdma_m_write_agent:av_readdatavalid -> sgdma_m_write_translator:uav_readdatavalid
	wire          rsp_mux_003_src_endofpacket;                                                    // rsp_mux_003:src_endofpacket -> sgdma_m_write_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                          // rsp_mux_003:src_valid -> sgdma_m_write_agent:rp_valid
	wire          rsp_mux_003_src_startofpacket;                                                  // rsp_mux_003:src_startofpacket -> sgdma_m_write_agent:rp_startofpacket
	wire  [149:0] rsp_mux_003_src_data;                                                           // rsp_mux_003:src_data -> sgdma_m_write_agent:rp_data
	wire    [4:0] rsp_mux_003_src_channel;                                                        // rsp_mux_003:src_channel -> sgdma_m_write_agent:rp_channel
	wire          rsp_mux_003_src_ready;                                                          // sgdma_m_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // user_module_0_avalon_master_agent:av_waitrequest -> user_module_0_avalon_master_translator:uav_waitrequest
	wire    [2:0] user_module_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // user_module_0_avalon_master_translator:uav_burstcount -> user_module_0_avalon_master_agent:av_burstcount
	wire   [31:0] user_module_0_avalon_master_translator_avalon_universal_master_0_writedata;     // user_module_0_avalon_master_translator:uav_writedata -> user_module_0_avalon_master_agent:av_writedata
	wire   [31:0] user_module_0_avalon_master_translator_avalon_universal_master_0_address;       // user_module_0_avalon_master_translator:uav_address -> user_module_0_avalon_master_agent:av_address
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_lock;          // user_module_0_avalon_master_translator:uav_lock -> user_module_0_avalon_master_agent:av_lock
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_write;         // user_module_0_avalon_master_translator:uav_write -> user_module_0_avalon_master_agent:av_write
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_read;          // user_module_0_avalon_master_translator:uav_read -> user_module_0_avalon_master_agent:av_read
	wire   [31:0] user_module_0_avalon_master_translator_avalon_universal_master_0_readdata;      // user_module_0_avalon_master_agent:av_readdata -> user_module_0_avalon_master_translator:uav_readdata
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // user_module_0_avalon_master_translator:uav_debugaccess -> user_module_0_avalon_master_agent:av_debugaccess
	wire    [3:0] user_module_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // user_module_0_avalon_master_translator:uav_byteenable -> user_module_0_avalon_master_agent:av_byteenable
	wire          user_module_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // user_module_0_avalon_master_agent:av_readdatavalid -> user_module_0_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_004_src_endofpacket;                                                    // rsp_mux_004:src_endofpacket -> user_module_0_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                          // rsp_mux_004:src_valid -> user_module_0_avalon_master_agent:rp_valid
	wire          rsp_mux_004_src_startofpacket;                                                  // rsp_mux_004:src_startofpacket -> user_module_0_avalon_master_agent:rp_startofpacket
	wire  [113:0] rsp_mux_004_src_data;                                                           // rsp_mux_004:src_data -> user_module_0_avalon_master_agent:rp_data
	wire    [4:0] rsp_mux_004_src_channel;                                                        // rsp_mux_004:src_channel -> user_module_0_avalon_master_agent:rp_channel
	wire          rsp_mux_004_src_ready;                                                          // user_module_0_avalon_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire          pcie_ip_txs_agent_m0_waitrequest;                                               // pcie_ip_txs_translator:uav_waitrequest -> pcie_ip_txs_agent:m0_waitrequest
	wire    [9:0] pcie_ip_txs_agent_m0_burstcount;                                                // pcie_ip_txs_agent:m0_burstcount -> pcie_ip_txs_translator:uav_burstcount
	wire   [63:0] pcie_ip_txs_agent_m0_writedata;                                                 // pcie_ip_txs_agent:m0_writedata -> pcie_ip_txs_translator:uav_writedata
	wire   [31:0] pcie_ip_txs_agent_m0_address;                                                   // pcie_ip_txs_agent:m0_address -> pcie_ip_txs_translator:uav_address
	wire          pcie_ip_txs_agent_m0_write;                                                     // pcie_ip_txs_agent:m0_write -> pcie_ip_txs_translator:uav_write
	wire          pcie_ip_txs_agent_m0_lock;                                                      // pcie_ip_txs_agent:m0_lock -> pcie_ip_txs_translator:uav_lock
	wire          pcie_ip_txs_agent_m0_read;                                                      // pcie_ip_txs_agent:m0_read -> pcie_ip_txs_translator:uav_read
	wire   [63:0] pcie_ip_txs_agent_m0_readdata;                                                  // pcie_ip_txs_translator:uav_readdata -> pcie_ip_txs_agent:m0_readdata
	wire          pcie_ip_txs_agent_m0_readdatavalid;                                             // pcie_ip_txs_translator:uav_readdatavalid -> pcie_ip_txs_agent:m0_readdatavalid
	wire          pcie_ip_txs_agent_m0_debugaccess;                                               // pcie_ip_txs_agent:m0_debugaccess -> pcie_ip_txs_translator:uav_debugaccess
	wire    [7:0] pcie_ip_txs_agent_m0_byteenable;                                                // pcie_ip_txs_agent:m0_byteenable -> pcie_ip_txs_translator:uav_byteenable
	wire          pcie_ip_txs_agent_rf_source_endofpacket;                                        // pcie_ip_txs_agent:rf_source_endofpacket -> pcie_ip_txs_agent_rsp_fifo:in_endofpacket
	wire          pcie_ip_txs_agent_rf_source_valid;                                              // pcie_ip_txs_agent:rf_source_valid -> pcie_ip_txs_agent_rsp_fifo:in_valid
	wire          pcie_ip_txs_agent_rf_source_startofpacket;                                      // pcie_ip_txs_agent:rf_source_startofpacket -> pcie_ip_txs_agent_rsp_fifo:in_startofpacket
	wire  [150:0] pcie_ip_txs_agent_rf_source_data;                                               // pcie_ip_txs_agent:rf_source_data -> pcie_ip_txs_agent_rsp_fifo:in_data
	wire          pcie_ip_txs_agent_rf_source_ready;                                              // pcie_ip_txs_agent_rsp_fifo:in_ready -> pcie_ip_txs_agent:rf_source_ready
	wire          pcie_ip_txs_agent_rsp_fifo_out_endofpacket;                                     // pcie_ip_txs_agent_rsp_fifo:out_endofpacket -> pcie_ip_txs_agent:rf_sink_endofpacket
	wire          pcie_ip_txs_agent_rsp_fifo_out_valid;                                           // pcie_ip_txs_agent_rsp_fifo:out_valid -> pcie_ip_txs_agent:rf_sink_valid
	wire          pcie_ip_txs_agent_rsp_fifo_out_startofpacket;                                   // pcie_ip_txs_agent_rsp_fifo:out_startofpacket -> pcie_ip_txs_agent:rf_sink_startofpacket
	wire  [150:0] pcie_ip_txs_agent_rsp_fifo_out_data;                                            // pcie_ip_txs_agent_rsp_fifo:out_data -> pcie_ip_txs_agent:rf_sink_data
	wire          pcie_ip_txs_agent_rsp_fifo_out_ready;                                           // pcie_ip_txs_agent:rf_sink_ready -> pcie_ip_txs_agent_rsp_fifo:out_ready
	wire          pcie_ip_txs_agent_rdata_fifo_src_valid;                                         // pcie_ip_txs_agent:rdata_fifo_src_valid -> pcie_ip_txs_agent_rdata_fifo:in_valid
	wire   [65:0] pcie_ip_txs_agent_rdata_fifo_src_data;                                          // pcie_ip_txs_agent:rdata_fifo_src_data -> pcie_ip_txs_agent_rdata_fifo:in_data
	wire          pcie_ip_txs_agent_rdata_fifo_src_ready;                                         // pcie_ip_txs_agent_rdata_fifo:in_ready -> pcie_ip_txs_agent:rdata_fifo_src_ready
	wire          pcie_ip_txs_agent_rdata_fifo_out_valid;                                         // pcie_ip_txs_agent_rdata_fifo:out_valid -> pcie_ip_txs_agent:rdata_fifo_sink_valid
	wire   [65:0] pcie_ip_txs_agent_rdata_fifo_out_data;                                          // pcie_ip_txs_agent_rdata_fifo:out_data -> pcie_ip_txs_agent:rdata_fifo_sink_data
	wire          pcie_ip_txs_agent_rdata_fifo_out_ready;                                         // pcie_ip_txs_agent:rdata_fifo_sink_ready -> pcie_ip_txs_agent_rdata_fifo:out_ready
	wire          sdram_s1_agent_m0_waitrequest;                                                  // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                   // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                    // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_agent_m0_address;                                                      // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_agent_m0_write;                                                        // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_agent_m0_lock;                                                         // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_agent_m0_read;                                                         // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                     // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_readdatavalid;                                                // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_debugaccess;                                                  // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                   // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_rf_source_endofpacket;                                           // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rf_source_valid;                                                 // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire          sdram_s1_agent_rf_source_startofpacket;                                         // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire  [114:0] sdram_s1_agent_rf_source_data;                                                  // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                 // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                        // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                              // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                      // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire  [114:0] sdram_s1_agent_rsp_fifo_out_data;                                               // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                              // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                            // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                             // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                            // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                            // sdram_s1_agent_rdata_fifo:out_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_out_data;                                             // sdram_s1_agent_rdata_fifo:out_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                            // sdram_s1_agent:rdata_fifo_sink_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          sgdma_descriptor_read_agent_cp_endofpacket;                                     // sgdma_descriptor_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          sgdma_descriptor_read_agent_cp_valid;                                           // sgdma_descriptor_read_agent:cp_valid -> router:sink_valid
	wire          sgdma_descriptor_read_agent_cp_startofpacket;                                   // sgdma_descriptor_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [113:0] sgdma_descriptor_read_agent_cp_data;                                            // sgdma_descriptor_read_agent:cp_data -> router:sink_data
	wire          sgdma_descriptor_read_agent_cp_ready;                                           // router:sink_ready -> sgdma_descriptor_read_agent:cp_ready
	wire          router_src_endofpacket;                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_src_valid;                                                               // router:src_valid -> cmd_demux:sink_valid
	wire          router_src_startofpacket;                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [113:0] router_src_data;                                                                // router:src_data -> cmd_demux:sink_data
	wire    [4:0] router_src_channel;                                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_ready;                                                               // cmd_demux:sink_ready -> router:src_ready
	wire          sgdma_descriptor_write_agent_cp_endofpacket;                                    // sgdma_descriptor_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_descriptor_write_agent_cp_valid;                                          // sgdma_descriptor_write_agent:cp_valid -> router_001:sink_valid
	wire          sgdma_descriptor_write_agent_cp_startofpacket;                                  // sgdma_descriptor_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [113:0] sgdma_descriptor_write_agent_cp_data;                                           // sgdma_descriptor_write_agent:cp_data -> router_001:sink_data
	wire          sgdma_descriptor_write_agent_cp_ready;                                          // router_001:sink_ready -> sgdma_descriptor_write_agent:cp_ready
	wire          router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_001_src_valid;                                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire          router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [113:0] router_001_src_data;                                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire    [4:0] router_001_src_channel;                                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_ready;                                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire          sgdma_m_read_agent_cp_endofpacket;                                              // sgdma_m_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          sgdma_m_read_agent_cp_valid;                                                    // sgdma_m_read_agent:cp_valid -> router_002:sink_valid
	wire          sgdma_m_read_agent_cp_startofpacket;                                            // sgdma_m_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire  [149:0] sgdma_m_read_agent_cp_data;                                                     // sgdma_m_read_agent:cp_data -> router_002:sink_data
	wire          sgdma_m_read_agent_cp_ready;                                                    // router_002:sink_ready -> sgdma_m_read_agent:cp_ready
	wire          sgdma_m_write_agent_cp_endofpacket;                                             // sgdma_m_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sgdma_m_write_agent_cp_valid;                                                   // sgdma_m_write_agent:cp_valid -> router_003:sink_valid
	wire          sgdma_m_write_agent_cp_startofpacket;                                           // sgdma_m_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire  [149:0] sgdma_m_write_agent_cp_data;                                                    // sgdma_m_write_agent:cp_data -> router_003:sink_data
	wire          sgdma_m_write_agent_cp_ready;                                                   // router_003:sink_ready -> sgdma_m_write_agent:cp_ready
	wire          router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_003_src_valid;                                                           // router_003:src_valid -> cmd_demux_003:sink_valid
	wire          router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire  [149:0] router_003_src_data;                                                            // router_003:src_data -> cmd_demux_003:sink_data
	wire    [4:0] router_003_src_channel;                                                         // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_ready;                                                           // cmd_demux_003:sink_ready -> router_003:src_ready
	wire          user_module_0_avalon_master_agent_cp_endofpacket;                               // user_module_0_avalon_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          user_module_0_avalon_master_agent_cp_valid;                                     // user_module_0_avalon_master_agent:cp_valid -> router_004:sink_valid
	wire          user_module_0_avalon_master_agent_cp_startofpacket;                             // user_module_0_avalon_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire  [113:0] user_module_0_avalon_master_agent_cp_data;                                      // user_module_0_avalon_master_agent:cp_data -> router_004:sink_data
	wire          user_module_0_avalon_master_agent_cp_ready;                                     // router_004:sink_ready -> user_module_0_avalon_master_agent:cp_ready
	wire          router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_004_src_valid;                                                           // router_004:src_valid -> cmd_demux_004:sink_valid
	wire          router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire  [113:0] router_004_src_data;                                                            // router_004:src_data -> cmd_demux_004:sink_data
	wire    [4:0] router_004_src_channel;                                                         // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_ready;                                                           // cmd_demux_004:sink_ready -> router_004:src_ready
	wire          pcie_ip_txs_agent_rp_endofpacket;                                               // pcie_ip_txs_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          pcie_ip_txs_agent_rp_valid;                                                     // pcie_ip_txs_agent:rp_valid -> router_005:sink_valid
	wire          pcie_ip_txs_agent_rp_startofpacket;                                             // pcie_ip_txs_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [149:0] pcie_ip_txs_agent_rp_data;                                                      // pcie_ip_txs_agent:rp_data -> router_005:sink_data
	wire          pcie_ip_txs_agent_rp_ready;                                                     // router_005:sink_ready -> pcie_ip_txs_agent:rp_ready
	wire          router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux:sink_valid
	wire          router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [149:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux:sink_data
	wire    [4:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_ready;                                                           // rsp_demux:sink_ready -> router_005:src_ready
	wire          sdram_s1_agent_rp_endofpacket;                                                  // sdram_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                        // sdram_s1_agent:rp_valid -> router_006:sink_valid
	wire          sdram_s1_agent_rp_startofpacket;                                                // sdram_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [113:0] sdram_s1_agent_rp_data;                                                         // sdram_s1_agent:rp_data -> router_006:sink_data
	wire          sdram_s1_agent_rp_ready;                                                        // router_006:sink_ready -> sdram_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                                     // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_006_src_valid;                                                           // router_006:src_valid -> rsp_demux_001:sink_valid
	wire          router_006_src_startofpacket;                                                   // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [113:0] router_006_src_data;                                                            // router_006:src_data -> rsp_demux_001:sink_data
	wire    [4:0] router_006_src_channel;                                                         // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_ready;                                                           // rsp_demux_001:sink_ready -> router_006:src_ready
	wire          router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> sgdma_m_read_limiter:cmd_sink_endofpacket
	wire          router_002_src_valid;                                                           // router_002:src_valid -> sgdma_m_read_limiter:cmd_sink_valid
	wire          router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> sgdma_m_read_limiter:cmd_sink_startofpacket
	wire  [149:0] router_002_src_data;                                                            // router_002:src_data -> sgdma_m_read_limiter:cmd_sink_data
	wire    [4:0] router_002_src_channel;                                                         // router_002:src_channel -> sgdma_m_read_limiter:cmd_sink_channel
	wire          router_002_src_ready;                                                           // sgdma_m_read_limiter:cmd_sink_ready -> router_002:src_ready
	wire          sgdma_m_read_limiter_cmd_src_endofpacket;                                       // sgdma_m_read_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sgdma_m_read_limiter_cmd_src_startofpacket;                                     // sgdma_m_read_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire  [149:0] sgdma_m_read_limiter_cmd_src_data;                                              // sgdma_m_read_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire    [4:0] sgdma_m_read_limiter_cmd_src_channel;                                           // sgdma_m_read_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          sgdma_m_read_limiter_cmd_src_ready;                                             // cmd_demux_002:sink_ready -> sgdma_m_read_limiter:cmd_src_ready
	wire          rsp_mux_002_src_endofpacket;                                                    // rsp_mux_002:src_endofpacket -> sgdma_m_read_limiter:rsp_sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                          // rsp_mux_002:src_valid -> sgdma_m_read_limiter:rsp_sink_valid
	wire          rsp_mux_002_src_startofpacket;                                                  // rsp_mux_002:src_startofpacket -> sgdma_m_read_limiter:rsp_sink_startofpacket
	wire  [149:0] rsp_mux_002_src_data;                                                           // rsp_mux_002:src_data -> sgdma_m_read_limiter:rsp_sink_data
	wire    [4:0] rsp_mux_002_src_channel;                                                        // rsp_mux_002:src_channel -> sgdma_m_read_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_ready;                                                          // sgdma_m_read_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire          sgdma_m_read_limiter_rsp_src_endofpacket;                                       // sgdma_m_read_limiter:rsp_src_endofpacket -> sgdma_m_read_agent:rp_endofpacket
	wire          sgdma_m_read_limiter_rsp_src_valid;                                             // sgdma_m_read_limiter:rsp_src_valid -> sgdma_m_read_agent:rp_valid
	wire          sgdma_m_read_limiter_rsp_src_startofpacket;                                     // sgdma_m_read_limiter:rsp_src_startofpacket -> sgdma_m_read_agent:rp_startofpacket
	wire  [149:0] sgdma_m_read_limiter_rsp_src_data;                                              // sgdma_m_read_limiter:rsp_src_data -> sgdma_m_read_agent:rp_data
	wire    [4:0] sgdma_m_read_limiter_rsp_src_channel;                                           // sgdma_m_read_limiter:rsp_src_channel -> sgdma_m_read_agent:rp_channel
	wire          sgdma_m_read_limiter_rsp_src_ready;                                             // sgdma_m_read_agent:rp_ready -> sgdma_m_read_limiter:rsp_src_ready
	wire          cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> pcie_ip_txs_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> pcie_ip_txs_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> pcie_ip_txs_burst_adapter:sink0_startofpacket
	wire  [149:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> pcie_ip_txs_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> pcie_ip_txs_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                              // pcie_ip_txs_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          pcie_ip_txs_burst_adapter_source0_endofpacket;                                  // pcie_ip_txs_burst_adapter:source0_endofpacket -> pcie_ip_txs_agent:cp_endofpacket
	wire          pcie_ip_txs_burst_adapter_source0_valid;                                        // pcie_ip_txs_burst_adapter:source0_valid -> pcie_ip_txs_agent:cp_valid
	wire          pcie_ip_txs_burst_adapter_source0_startofpacket;                                // pcie_ip_txs_burst_adapter:source0_startofpacket -> pcie_ip_txs_agent:cp_startofpacket
	wire  [149:0] pcie_ip_txs_burst_adapter_source0_data;                                         // pcie_ip_txs_burst_adapter:source0_data -> pcie_ip_txs_agent:cp_data
	wire          pcie_ip_txs_burst_adapter_source0_ready;                                        // pcie_ip_txs_agent:cp_ready -> pcie_ip_txs_burst_adapter:source0_ready
	wire    [4:0] pcie_ip_txs_burst_adapter_source0_channel;                                      // pcie_ip_txs_burst_adapter:source0_channel -> pcie_ip_txs_agent:cp_channel
	wire          cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> sdram_s1_burst_adapter:sink0_valid
	wire          cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire  [113:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> sdram_s1_burst_adapter:sink0_data
	wire    [4:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_ready;                                                          // sdram_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                     // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                           // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                   // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire  [113:0] sdram_s1_burst_adapter_source0_data;                                            // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                           // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire    [4:0] sdram_s1_burst_adapter_source0_channel;                                         // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          cmd_demux_002_src0_endofpacket;                                                 // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src0_valid;                                                       // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire          cmd_demux_002_src0_startofpacket;                                               // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire  [149:0] cmd_demux_002_src0_data;                                                        // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire    [4:0] cmd_demux_002_src0_channel;                                                     // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_ready;                                                       // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire          cmd_demux_003_src0_endofpacket;                                                 // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src0_valid;                                                       // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire          cmd_demux_003_src0_startofpacket;                                               // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire  [149:0] cmd_demux_003_src0_data;                                                        // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire    [4:0] cmd_demux_003_src0_channel;                                                     // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_ready;                                                       // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire          cmd_demux_004_src0_endofpacket;                                                 // cmd_demux_004:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_004_src0_valid;                                                       // cmd_demux_004:src0_valid -> cmd_mux_001:sink2_valid
	wire          cmd_demux_004_src0_startofpacket;                                               // cmd_demux_004:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire  [113:0] cmd_demux_004_src0_data;                                                        // cmd_demux_004:src0_data -> cmd_mux_001:sink2_data
	wire    [4:0] cmd_demux_004_src0_channel;                                                     // cmd_demux_004:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_004_src0_ready;                                                       // cmd_mux_001:sink2_ready -> cmd_demux_004:src0_ready
	wire          rsp_demux_src2_endofpacket;                                                     // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                           // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire          rsp_demux_src2_startofpacket;                                                   // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire  [149:0] rsp_demux_src2_data;                                                            // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire    [4:0] rsp_demux_src2_channel;                                                         // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire          rsp_demux_src3_endofpacket;                                                     // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                           // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire          rsp_demux_src3_startofpacket;                                                   // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire  [149:0] rsp_demux_src3_data;                                                            // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire    [4:0] rsp_demux_src3_channel;                                                         // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire          rsp_demux_001_src2_endofpacket;                                                 // rsp_demux_001:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                       // rsp_demux_001:src2_valid -> rsp_mux_004:sink0_valid
	wire          rsp_demux_001_src2_startofpacket;                                               // rsp_demux_001:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire  [113:0] rsp_demux_001_src2_data;                                                        // rsp_demux_001:src2_data -> rsp_mux_004:sink0_data
	wire    [4:0] rsp_demux_001_src2_channel;                                                     // rsp_demux_001:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_001_src2_ready;                                                       // rsp_mux_004:sink0_ready -> rsp_demux_001:src2_ready
	wire          cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire          cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire    [4:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_ready;                                                           // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;         // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid;               // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket;       // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [149:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data;                // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready;               // cmd_mux:sink0_ready -> sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire    [4:0] sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel;             // sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_valid
	wire          cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_startofpacket
	wire  [113:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_data
	wire    [4:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_ready;                                                       // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket;        // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid;              // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket;      // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [149:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data;               // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready;              // cmd_mux:sink1_ready -> sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_ready
	wire    [4:0] sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel;            // sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_002_src1_endofpacket;                                                 // cmd_demux_002:src1_endofpacket -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src1_valid;                                                       // cmd_demux_002:src1_valid -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_002_src1_startofpacket;                                               // cmd_demux_002:src1_startofpacket -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire  [149:0] cmd_demux_002_src1_data;                                                        // cmd_demux_002:src1_data -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_data
	wire    [4:0] cmd_demux_002_src1_channel;                                                     // cmd_demux_002:src1_channel -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_ready;                                                       // sgdma_m_read_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire          cmd_demux_003_src1_endofpacket;                                                 // cmd_demux_003:src1_endofpacket -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_003_src1_valid;                                                       // cmd_demux_003:src1_valid -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_valid
	wire          cmd_demux_003_src1_startofpacket;                                               // cmd_demux_003:src1_startofpacket -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire  [149:0] cmd_demux_003_src1_data;                                                        // cmd_demux_003:src1_data -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_data
	wire    [4:0] cmd_demux_003_src1_channel;                                                     // cmd_demux_003:src1_channel -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src1_ready;                                                       // sgdma_m_write_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src1_ready
	wire          rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_valid
	wire          rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_startofpacket
	wire  [149:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_data
	wire    [4:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_ready;                                                           // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket;         // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid;               // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket;       // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [113:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data;                // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready;               // rsp_mux:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_ready
	wire    [4:0] pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel;             // pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src1_endofpacket;                                                     // rsp_demux:src1_endofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                           // rsp_demux:src1_valid -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_valid
	wire          rsp_demux_src1_startofpacket;                                                   // rsp_demux:src1_startofpacket -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_startofpacket
	wire  [149:0] rsp_demux_src1_data;                                                            // rsp_demux:src1_data -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_data
	wire    [4:0] rsp_demux_src1_channel;                                                         // rsp_demux:src1_channel -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_ready;                                                           // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket;        // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid;              // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket;      // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [113:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data;               // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready;              // rsp_mux_001:sink0_ready -> pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_ready
	wire    [4:0] pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel;            // pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_valid
	wire          rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_startofpacket
	wire  [113:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_data
	wire    [4:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_ready;                                                       // sdram_s1_to_sgdma_m_read_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                                 // rsp_demux_001:src1_endofpacket -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                       // rsp_demux_001:src1_valid -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_valid
	wire          rsp_demux_001_src1_startofpacket;                                               // rsp_demux_001:src1_startofpacket -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_startofpacket
	wire  [113:0] rsp_demux_001_src1_data;                                                        // rsp_demux_001:src1_data -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_data
	wire    [4:0] rsp_demux_001_src1_channel;                                                     // rsp_demux_001:src1_channel -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_ready;                                                       // sdram_s1_to_sgdma_m_write_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire          sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_endofpacket;                     // sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_endofpacket -> crosser:in_endofpacket
	wire          sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_valid;                           // sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_valid -> crosser:in_valid
	wire          sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_startofpacket;                   // sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_startofpacket -> crosser:in_startofpacket
	wire  [113:0] sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_data;                            // sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_data -> crosser:in_data
	wire          sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_ready;                           // crosser:in_ready -> sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_ready
	wire    [4:0] sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_channel;                         // sgdma_m_read_to_sdram_s1_cmd_width_adapter:out_channel -> crosser:in_channel
	wire          crosser_out_endofpacket;                                                        // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          crosser_out_valid;                                                              // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire          crosser_out_startofpacket;                                                      // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [113:0] crosser_out_data;                                                               // crosser:out_data -> cmd_mux_001:sink0_data
	wire    [4:0] crosser_out_channel;                                                            // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_ready;                                                              // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire          sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_endofpacket;                    // sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_endofpacket -> crosser_001:in_endofpacket
	wire          sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_valid;                          // sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_valid -> crosser_001:in_valid
	wire          sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_startofpacket;                  // sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_startofpacket -> crosser_001:in_startofpacket
	wire  [113:0] sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_data;                           // sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_data -> crosser_001:in_data
	wire          sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_ready;                          // crosser_001:in_ready -> sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_ready
	wire    [4:0] sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_channel;                        // sgdma_m_write_to_sdram_s1_cmd_width_adapter:out_channel -> crosser_001:in_channel
	wire          crosser_001_out_endofpacket;                                                    // crosser_001:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          crosser_001_out_valid;                                                          // crosser_001:out_valid -> cmd_mux_001:sink1_valid
	wire          crosser_001_out_startofpacket;                                                  // crosser_001:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [113:0] crosser_001_out_data;                                                           // crosser_001:out_data -> cmd_mux_001:sink1_data
	wire    [4:0] crosser_001_out_channel;                                                        // crosser_001:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_001_out_ready;                                                          // cmd_mux_001:sink1_ready -> crosser_001:out_ready
	wire          sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket;                     // sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_endofpacket -> crosser_002:in_endofpacket
	wire          sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_valid;                           // sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_valid -> crosser_002:in_valid
	wire          sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket;                   // sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_startofpacket -> crosser_002:in_startofpacket
	wire  [149:0] sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_data;                            // sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_data -> crosser_002:in_data
	wire          sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_ready;                           // crosser_002:in_ready -> sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_ready
	wire    [4:0] sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_channel;                         // sdram_s1_to_sgdma_m_read_rsp_width_adapter:out_channel -> crosser_002:in_channel
	wire          crosser_002_out_endofpacket;                                                    // crosser_002:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          crosser_002_out_valid;                                                          // crosser_002:out_valid -> rsp_mux_002:sink1_valid
	wire          crosser_002_out_startofpacket;                                                  // crosser_002:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire  [149:0] crosser_002_out_data;                                                           // crosser_002:out_data -> rsp_mux_002:sink1_data
	wire    [4:0] crosser_002_out_channel;                                                        // crosser_002:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_002_out_ready;                                                          // rsp_mux_002:sink1_ready -> crosser_002:out_ready
	wire          sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket;                    // sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_endofpacket -> crosser_003:in_endofpacket
	wire          sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_valid;                          // sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_valid -> crosser_003:in_valid
	wire          sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket;                  // sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_startofpacket -> crosser_003:in_startofpacket
	wire  [149:0] sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_data;                           // sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_data -> crosser_003:in_data
	wire          sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_ready;                          // crosser_003:in_ready -> sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_ready
	wire    [4:0] sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_channel;                        // sdram_s1_to_sgdma_m_write_rsp_width_adapter:out_channel -> crosser_003:in_channel
	wire          crosser_003_out_endofpacket;                                                    // crosser_003:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          crosser_003_out_valid;                                                          // crosser_003:out_valid -> rsp_mux_003:sink1_valid
	wire          crosser_003_out_startofpacket;                                                  // crosser_003:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire  [149:0] crosser_003_out_data;                                                           // crosser_003:out_data -> rsp_mux_003:sink1_data
	wire    [4:0] crosser_003_out_channel;                                                        // crosser_003:out_channel -> rsp_mux_003:sink1_channel
	wire          crosser_003_out_ready;                                                          // rsp_mux_003:sink1_ready -> crosser_003:out_ready
	wire    [4:0] sgdma_m_read_limiter_cmd_valid_data;                                            // sgdma_m_read_limiter:cmd_src_valid -> cmd_demux_002:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_read_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                                //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address              (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_descriptor_read_read),                                               //                          .read
		.av_readdata              (sgdma_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                     //               (terminated)
		.av_byteenable            (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                     //               (terminated)
		.av_begintransfer         (1'b0),                                                                     //               (terminated)
		.av_chipselect            (1'b0),                                                                     //               (terminated)
		.av_write                 (1'b0),                                                                     //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                  (1'b0),                                                                     //               (terminated)
		.av_debugaccess           (1'b0),                                                                     //               (terminated)
		.uav_clken                (),                                                                         //               (terminated)
		.av_clken                 (1'b1),                                                                     //               (terminated)
		.uav_response             (2'b00),                                                                    //               (terminated)
		.av_response              (),                                                                         //               (terminated)
		.uav_writeresponserequest (),                                                                         //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                     //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid    ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_write_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                                 //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write                 (sgdma_descriptor_write_write),                                              //                          .write
		.av_writedata             (sgdma_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_read                  (1'b0),                                                                      //               (terminated)
		.av_readdata              (),                                                                          //               (terminated)
		.av_readdatavalid         (),                                                                          //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_read_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                            //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address              (sgdma_m_read_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_m_read_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read                 (sgdma_m_read_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write                (sgdma_m_read_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest          (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid        (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable           (sgdma_m_read_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata             (sgdma_m_read_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata            (sgdma_m_read_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock                 (sgdma_m_read_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess          (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.av_address               (sgdma_m_read_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_m_read_waitrequest),                                             //                          .waitrequest
		.av_burstcount            (sgdma_m_read_burstcount),                                              //                          .burstcount
		.av_read                  (sgdma_m_read_read),                                                    //                          .read
		.av_readdata              (sgdma_m_read_readdata),                                                //                          .readdata
		.av_readdatavalid         (sgdma_m_read_readdatavalid),                                           //                          .readdatavalid
		.av_byteenable            (8'b11111111),                                                          //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                 //               (terminated)
		.av_write                 (1'b0),                                                                 //               (terminated)
		.av_writedata             (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                  (1'b0),                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                 //               (terminated)
		.uav_clken                (),                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                //               (terminated)
		.av_response              (),                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_write_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                        //                       clk.clk
		.reset                    (sgdma_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address              (sgdma_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_m_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (sgdma_m_write_burstcount),                                         //                          .burstcount
		.av_byteenable            (sgdma_m_write_byteenable),                                         //                          .byteenable
		.av_write                 (sgdma_m_write_write),                                              //                          .write
		.av_writedata             (sgdma_m_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                             //               (terminated)
		.av_read                  (1'b0),                                                             //               (terminated)
		.av_readdata              (),                                                                 //               (terminated)
		.av_readdatavalid         (),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                             //               (terminated)
		.av_debugaccess           (1'b0),                                                             //               (terminated)
		.uav_clken                (),                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                             //               (terminated)
		.uav_response             (2'b00),                                                            //               (terminated)
		.av_response              (),                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) user_module_0_avalon_master_translator (
		.clk                      (clk_50_clk_clk),                                                                 //                       clk.clk
		.reset                    (user_module_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address              (user_module_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (user_module_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (user_module_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (user_module_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (user_module_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (user_module_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (user_module_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (user_module_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (user_module_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (user_module_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (user_module_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (user_module_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (user_module_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (user_module_0_avalon_master_read),                                               //                          .read
		.av_readdata              (user_module_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (user_module_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (user_module_0_avalon_master_write),                                              //                          .write
		.av_writedata             (user_module_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                           //               (terminated)
		.av_byteenable            (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                           //               (terminated)
		.av_begintransfer         (1'b0),                                                                           //               (terminated)
		.av_chipselect            (1'b0),                                                                           //               (terminated)
		.av_lock                  (1'b0),                                                                           //               (terminated)
		.av_debugaccess           (1'b0),                                                                           //               (terminated)
		.uav_clken                (),                                                                               //               (terminated)
		.av_clken                 (1'b1),                                                                           //               (terminated)
		.uav_response             (2'b00),                                                                          //               (terminated)
		.av_response              (),                                                                               //               (terminated)
		.uav_writeresponserequest (),                                                                               //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                           //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid    ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_ip_txs_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                //                      clk.clk
		.reset                    (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pcie_ip_txs_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount           (pcie_ip_txs_agent_m0_burstcount),                          //                         .burstcount
		.uav_read                 (pcie_ip_txs_agent_m0_read),                                //                         .read
		.uav_write                (pcie_ip_txs_agent_m0_write),                               //                         .write
		.uav_waitrequest          (pcie_ip_txs_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid        (pcie_ip_txs_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable           (pcie_ip_txs_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata             (pcie_ip_txs_agent_m0_readdata),                            //                         .readdata
		.uav_writedata            (pcie_ip_txs_agent_m0_writedata),                           //                         .writedata
		.uav_lock                 (pcie_ip_txs_agent_m0_lock),                                //                         .lock
		.uav_debugaccess          (pcie_ip_txs_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address               (pcie_ip_txs_address),                                      //      avalon_anti_slave_0.address
		.av_write                 (pcie_ip_txs_write),                                        //                         .write
		.av_read                  (pcie_ip_txs_read),                                         //                         .read
		.av_readdata              (pcie_ip_txs_readdata),                                     //                         .readdata
		.av_writedata             (pcie_ip_txs_writedata),                                    //                         .writedata
		.av_burstcount            (pcie_ip_txs_burstcount),                                   //                         .burstcount
		.av_byteenable            (pcie_ip_txs_byteenable),                                   //                         .byteenable
		.av_readdatavalid         (pcie_ip_txs_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest           (pcie_ip_txs_waitrequest),                                  //                         .waitrequest
		.av_chipselect            (pcie_ip_txs_chipselect),                                   //                         .chipselect
		.av_begintransfer         (),                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                         //              (terminated)
		.av_writebyteenable       (),                                                         //              (terminated)
		.av_lock                  (),                                                         //              (terminated)
		.av_clken                 (),                                                         //              (terminated)
		.uav_clken                (1'b0),                                                     //              (terminated)
		.av_debugaccess           (),                                                         //              (terminated)
		.av_outputenable          (),                                                         //              (terminated)
		.uav_response             (),                                                         //              (terminated)
		.av_response              (2'b00),                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                         //              (terminated)
		.av_writeresponserequest  (),                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (clk_50_clk_clk),                          //                      clk.clk
		.reset                    (sdram_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write                (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                          //                         .write
		.av_read                  (sdram_s1_read),                           //                         .read
		.av_readdata              (sdram_s1_readdata),                       //                         .readdata
		.av_writedata             (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_read_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address              (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                        //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                         //          .data
		.rp_channel              (rsp_mux_src_channel),                                                      //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                        //          .ready
		.av_response             (),                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_write_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_BEGIN_BURST           (129),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_BURST_TYPE_H          (126),
		.PKT_BURST_TYPE_L          (125),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (134),
		.PKT_THREAD_ID_H           (137),
		.PKT_THREAD_ID_L           (137),
		.PKT_CACHE_H               (144),
		.PKT_CACHE_L               (141),
		.PKT_DATA_SIDEBAND_H       (128),
		.PKT_DATA_SIDEBAND_L       (128),
		.PKT_QOS_H                 (130),
		.PKT_QOS_L                 (130),
		.PKT_ADDR_SIDEBAND_H       (127),
		.PKT_ADDR_SIDEBAND_L       (127),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_ORI_BURST_SIZE_H      (149),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_read_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                       //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address              (sgdma_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid                (sgdma_m_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (sgdma_m_read_limiter_rsp_src_data),                               //          .data
		.rp_channel              (sgdma_m_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (sgdma_m_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (sgdma_m_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (sgdma_m_read_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_BEGIN_BURST           (129),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_BURST_TYPE_H          (126),
		.PKT_BURST_TYPE_L          (125),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (134),
		.PKT_THREAD_ID_H           (137),
		.PKT_THREAD_ID_L           (137),
		.PKT_CACHE_H               (144),
		.PKT_CACHE_L               (141),
		.PKT_DATA_SIDEBAND_H       (128),
		.PKT_DATA_SIDEBAND_L       (128),
		.PKT_QOS_H                 (130),
		.PKT_QOS_L                 (130),
		.PKT_ADDR_SIDEBAND_H       (127),
		.PKT_ADDR_SIDEBAND_L       (127),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_ORI_BURST_SIZE_H      (149),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_write_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                        //       clk.clk
		.reset                   (sgdma_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address              (sgdma_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (sgdma_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (sgdma_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (sgdma_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (sgdma_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (sgdma_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (sgdma_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (sgdma_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (sgdma_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (sgdma_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (sgdma_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (sgdma_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (sgdma_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket        (sgdma_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (sgdma_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (sgdma_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_003_src_valid),                                            //        rp.valid
		.rp_data                 (rsp_mux_003_src_data),                                             //          .data
		.rp_channel              (rsp_mux_003_src_channel),                                          //          .channel
		.rp_startofpacket        (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.rp_endofpacket          (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.rp_ready                (rsp_mux_003_src_ready),                                            //          .ready
		.av_response             (),                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) user_module_0_avalon_master_agent (
		.clk                     (clk_50_clk_clk),                                                                 //       clk.clk
		.reset                   (user_module_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address              (user_module_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (user_module_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (user_module_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (user_module_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (user_module_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (user_module_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (user_module_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (user_module_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (user_module_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (user_module_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (user_module_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (user_module_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (user_module_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (user_module_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (user_module_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (user_module_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_004_src_valid),                                                          //        rp.valid
		.rp_data                 (rsp_mux_004_src_data),                                                           //          .data
		.rp_channel              (rsp_mux_004_src_channel),                                                        //          .channel
		.rp_startofpacket        (rsp_mux_004_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket          (rsp_mux_004_src_endofpacket),                                                    //          .endofpacket
		.rp_ready                (rsp_mux_004_src_ready),                                                          //          .ready
		.av_response             (),                                                                               // (terminated)
		.av_writeresponserequest (1'b0),                                                                           // (terminated)
		.av_writeresponsevalid   ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (129),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (134),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_ORI_BURST_SIZE_H      (149),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (150),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_txs_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                //             clk.clk
		.reset                   (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcie_ip_txs_agent_m0_address),                             //              m0.address
		.m0_burstcount           (pcie_ip_txs_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (pcie_ip_txs_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (pcie_ip_txs_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (pcie_ip_txs_agent_m0_lock),                                //                .lock
		.m0_readdata             (pcie_ip_txs_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (pcie_ip_txs_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (pcie_ip_txs_agent_m0_read),                                //                .read
		.m0_waitrequest          (pcie_ip_txs_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (pcie_ip_txs_agent_m0_writedata),                           //                .writedata
		.m0_write                (pcie_ip_txs_agent_m0_write),                               //                .write
		.rp_endofpacket          (pcie_ip_txs_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (pcie_ip_txs_agent_rp_ready),                               //                .ready
		.rp_valid                (pcie_ip_txs_agent_rp_valid),                               //                .valid
		.rp_data                 (pcie_ip_txs_agent_rp_data),                                //                .data
		.rp_startofpacket        (pcie_ip_txs_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (pcie_ip_txs_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (pcie_ip_txs_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (pcie_ip_txs_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (pcie_ip_txs_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (pcie_ip_txs_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (pcie_ip_txs_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (pcie_ip_txs_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (pcie_ip_txs_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (pcie_ip_txs_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (pcie_ip_txs_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (pcie_ip_txs_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (pcie_ip_txs_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (pcie_ip_txs_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (pcie_ip_txs_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (pcie_ip_txs_agent_rdata_fifo_out_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pcie_ip_txs_agent_rdata_fifo_out_valid),                   //                .valid
		.rdata_fifo_sink_data    (pcie_ip_txs_agent_rdata_fifo_out_data),                    //                .data
		.rdata_fifo_src_ready    (pcie_ip_txs_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_ip_txs_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (pcie_ip_txs_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponserequest (),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (151),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ip_txs_agent_rsp_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                                //       clk.clk
		.reset             (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ip_txs_agent_rf_source_data),                         //        in.data
		.in_valid          (pcie_ip_txs_agent_rf_source_valid),                        //          .valid
		.in_ready          (pcie_ip_txs_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (pcie_ip_txs_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (pcie_ip_txs_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (pcie_ip_txs_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (pcie_ip_txs_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (pcie_ip_txs_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (pcie_ip_txs_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (pcie_ip_txs_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (1024),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_ip_txs_agent_rdata_fifo (
		.clk               (pcie_ip_pcie_core_clk_clk),                                //       clk.clk
		.reset             (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_ip_txs_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (pcie_ip_txs_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (pcie_ip_txs_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (pcie_ip_txs_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (pcie_ip_txs_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (pcie_ip_txs_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (sdram_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                            //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                          //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router router (
		.sink_ready         (sgdma_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                    //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router router_001 (
		.sink_ready         (sgdma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                     //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (sgdma_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (sgdma_m_write_agent_cp_ready),            //      sink.ready
		.sink_valid         (sgdma_m_write_agent_cp_valid),            //          .valid
		.sink_data          (sgdma_m_write_agent_cp_data),             //          .data
		.sink_startofpacket (sgdma_m_write_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sgdma_m_write_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                    //       src.ready
		.src_valid          (router_003_src_valid),                    //          .valid
		.src_data           (router_003_src_data),                     //          .data
		.src_channel        (router_003_src_channel),                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)               //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (user_module_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (user_module_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (user_module_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (user_module_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (user_module_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                     //       clk.clk
		.reset              (user_module_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (pcie_ip_txs_agent_rp_ready),                               //      sink.ready
		.sink_valid         (pcie_ip_txs_agent_rp_valid),                               //          .valid
		.sink_data          (pcie_ip_txs_agent_rp_data),                                //          .data
		.sink_startofpacket (pcie_ip_txs_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_ip_txs_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                //       clk.clk
		.reset              (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                     //       src.ready
		.src_valid          (router_005_src_valid),                                     //          .valid
		.src_data           (router_005_src_data),                                      //          .data
		.src_channel        (router_005_src_channel),                                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_router_006 router_006 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                          //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (134),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (131),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.REORDER                   (0)
	) sgdma_m_read_limiter (
		.clk                    (pcie_ip_pcie_core_clk_clk),                  //       clk.clk
		.reset                  (sgdma_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                       //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                       //          .valid
		.cmd_sink_data          (router_002_src_data),                        //          .data
		.cmd_sink_channel       (router_002_src_channel),                     //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),               //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                 //          .endofpacket
		.cmd_src_ready          (sgdma_m_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sgdma_m_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sgdma_m_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sgdma_m_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sgdma_m_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                      //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                    //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                       //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.rsp_src_ready          (sgdma_m_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sgdma_m_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sgdma_m_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sgdma_m_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sgdma_m_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sgdma_m_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sgdma_m_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (129),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_BURST_TYPE_H          (126),
		.PKT_BURST_TYPE_L          (125),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (150),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (119),
		.OUT_BURSTWRAP_H           (121),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pcie_ip_txs_burst_adapter (
		.clk                   (pcie_ip_pcie_core_clk_clk),                                //       cr0.clk
		.reset                 (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                        //          .ready
		.source0_valid         (pcie_ip_txs_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (pcie_ip_txs_burst_adapter_source0_data),                   //          .data
		.source0_channel       (pcie_ip_txs_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (pcie_ip_txs_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (pcie_ip_txs_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (pcie_ip_txs_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                               //       cr0.clk
		.reset                 (sdram_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                        //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                        //      sink.ready
		.sink_channel       (router_src_channel),                      //          .channel
		.sink_data          (router_src_data),                         //          .data
		.sink_startofpacket (router_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                    //      sink.ready
		.sink_channel       (router_001_src_channel),                  //          .channel
		.sink_data          (router_001_src_data),                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_001_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (pcie_ip_pcie_core_clk_clk),                  //        clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (sgdma_m_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sgdma_m_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sgdma_m_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sgdma_m_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sgdma_m_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sgdma_m_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                   //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //           .valid
		.src0_data          (cmd_demux_002_src0_data),                    //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),             //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                   //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                   //           .valid
		.src1_data          (cmd_demux_002_src1_data),                    //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                 //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),           //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)              //           .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_demux_003 cmd_demux_003 (
		.clk                (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset              (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                //          .valid
		.src0_data          (cmd_demux_003_src0_data),                 //          .data
		.src0_channel       (cmd_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                //          .valid
		.src1_data          (cmd_demux_003_src1_data),                 //          .data
		.src1_channel       (cmd_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)           //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_demux_004 cmd_demux_004 (
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (user_module_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                            //      sink.ready
		.sink_channel       (router_004_src_channel),                          //          .channel
		.sink_data          (router_004_src_data),                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                            //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                        //          .valid
		.src0_data          (cmd_demux_004_src0_data),                         //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                   //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                         //          .valid
		.src_data            (cmd_mux_src_data),                                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),          //     sink0.ready
		.sink0_valid         (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),          //          .valid
		.sink0_channel       (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),        //          .channel
		.sink0_data          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),           //          .data
		.sink0_startofpacket (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink1_ready         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                  //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                   //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                            //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                  //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                  //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                                //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                   //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                                             //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                          //       clk.clk
		.reset               (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                       //          .valid
		.sink0_channel       (crosser_out_channel),                     //          .channel
		.sink0_data          (crosser_out_data),                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                   //          .valid
		.sink1_channel       (crosser_001_out_channel),                 //          .channel
		.sink1_data          (crosser_001_out_data),                    //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),              //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                 //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)           //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),                                //       clk.clk
		.reset              (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                     //      sink.ready
		.sink_channel       (router_005_src_channel),                                   //          .channel
		.sink_data          (router_005_src_data),                                      //          .data
		.sink_startofpacket (router_005_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_005_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                     //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                     //          .valid
		.src1_data          (rsp_demux_src1_data),                                      //          .data
		.src1_channel       (rsp_demux_src1_channel),                                   //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                               //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                     //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                     //          .valid
		.src2_data          (rsp_demux_src2_data),                                      //          .data
		.src2_channel       (rsp_demux_src2_channel),                                   //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                             //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                               //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                     //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                     //          .valid
		.src3_data          (rsp_demux_src3_data),                                      //          .data
		.src3_channel       (rsp_demux_src3_channel),                                   //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                             //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                                //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_50_clk_clk),                          //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                //          .valid
		.src2_data          (rsp_demux_001_src2_data),                 //          .data
		.src2_channel       (rsp_demux_001_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)           //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_src_data),                                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_001_src_data),                                                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                  //          .channel
		.sink0_data          (rsp_demux_src2_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                   //          .valid
		.sink1_channel       (crosser_002_out_channel),                 //          .channel
		.sink1_data          (crosser_002_out_data),                    //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)              //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_mux_002 rsp_mux_003 (
		.clk                 (pcie_ip_pcie_core_clk_clk),               //       clk.clk
		.reset               (sgdma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                   //          .valid
		.src_data            (rsp_mux_003_src_data),                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                  //          .channel
		.sink0_data          (rsp_demux_src3_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket),              //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                   //          .valid
		.sink1_channel       (crosser_003_out_channel),                 //          .channel
		.sink1_data          (crosser_003_out_data),                    //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)              //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_1_rsp_mux_004 rsp_mux_004 (
		.clk                 (clk_50_clk_clk),                                  //       clk.clk
		.reset               (user_module_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                           //          .valid
		.src_data            (rsp_mux_004_src_data),                            //          .data
		.src_channel         (rsp_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),                        //     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),                        //          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),                      //          .channel
		.sink0_data          (rsp_demux_001_src2_data),                         //          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket)                   //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                     //          .ready
		.in_data              (cmd_demux_src0_data),                                                      //          .data
		.out_endofpacket      (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_read_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                  //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                   //          .data
		.out_endofpacket      (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_descriptor_write_to_pcie_ip_txs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_read_to_sdram_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                    //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                     //      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                   //          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                     //          .ready
		.in_data              (cmd_demux_002_src1_data),                                      //          .data
		.out_endofpacket      (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_m_write_to_sdram_s1_cmd_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                     //       clk.clk
		.reset                (sgdma_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_003_src1_valid),                                      //      sink.valid
		.in_channel           (cmd_demux_003_src1_channel),                                    //          .channel
		.in_startofpacket     (cmd_demux_003_src1_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src1_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_demux_003_src1_ready),                                      //          .ready
		.in_data              (cmd_demux_003_src1_data),                                       //          .data
		.out_endofpacket      (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                //       clk.clk
		.reset                (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                     //          .ready
		.in_data              (rsp_demux_src0_data),                                                      //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter (
		.clk                  (pcie_ip_pcie_core_clk_clk),                                                 //       clk.clk
		.reset                (pcie_ip_txs_translator_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                      //          .ready
		.in_data              (rsp_demux_src1_data),                                                       //          .data
		.out_endofpacket      (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pcie_ip_txs_to_sgdma_descriptor_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_sgdma_m_read_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                               //       clk.clk
		.reset                (sdram_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                     //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                   //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                     //          .ready
		.in_data              (rsp_demux_001_src0_data),                                      //          .data
		.out_endofpacket      (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_sgdma_m_write_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                                //       clk.clk
		.reset                (sdram_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                      //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                    //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                      //          .ready
		.in_data              (rsp_demux_001_src1_data),                                       //          .data
		.out_endofpacket      (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pcie_ip_pcie_core_clk_clk),                                    //        in_clk.clk
		.in_reset          (sgdma_reset_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                               //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (sgdma_m_read_to_sdram_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_out_ready),                                            //           out.ready
		.out_valid         (crosser_out_valid),                                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_out_channel),                                          //              .channel
		.out_data          (crosser_out_data),                                             //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (114),
		.BITS_PER_SYMBOL     (114),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pcie_ip_pcie_core_clk_clk),                                     //        in_clk.clk
		.in_reset          (sgdma_reset_reset_bridge_in_reset_reset),                       //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),                       // out_clk_reset.reset
		.in_ready          (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (sgdma_m_write_to_sdram_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_001_out_ready),                                         //           out.ready
		.out_valid         (crosser_001_out_valid),                                         //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                       //              .channel
		.out_data          (crosser_001_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (150),
		.BITS_PER_SYMBOL     (150),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                                               //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (pcie_ip_pcie_core_clk_clk),                                    //       out_clk.clk
		.out_reset         (sgdma_reset_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_s1_to_sgdma_m_read_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_002_out_ready),                                        //           out.ready
		.out_valid         (crosser_002_out_valid),                                        //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                      //              .channel
		.out_data          (crosser_002_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (150),
		.BITS_PER_SYMBOL     (150),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                                //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),                       //  in_clk_reset.reset
		.out_clk           (pcie_ip_pcie_core_clk_clk),                                     //       out_clk.clk
		.out_reset         (sgdma_reset_reset_bridge_in_reset_reset),                       // out_clk_reset.reset
		.in_ready          (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_s1_to_sgdma_m_write_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_003_out_ready),                                         //           out.ready
		.out_valid         (crosser_003_out_valid),                                         //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                       //              .channel
		.out_data          (crosser_003_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

endmodule
