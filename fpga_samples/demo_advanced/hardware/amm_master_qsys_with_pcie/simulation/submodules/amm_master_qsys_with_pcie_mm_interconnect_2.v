// amm_master_qsys_with_pcie_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.02.23.22:37:43

`timescale 1 ps / 1 ps
module amm_master_qsys_with_pcie_mm_interconnect_2 (
		input  wire        clk_50_clk_clk,                                              //                                            clk_50_clk.clk
		input  wire        pcie_ip_pcie_core_clk_clk,                                   //                                 pcie_ip_pcie_core_clk.clk
		input  wire        pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset, // pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset.reset
		input  wire        user_module_0_reset_reset_bridge_in_reset_reset,             //             user_module_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] pcie_ip_bar1_0_address,                                      //                                        pcie_ip_bar1_0.address
		output wire        pcie_ip_bar1_0_waitrequest,                                  //                                                      .waitrequest
		input  wire [6:0]  pcie_ip_bar1_0_burstcount,                                   //                                                      .burstcount
		input  wire [7:0]  pcie_ip_bar1_0_byteenable,                                   //                                                      .byteenable
		input  wire        pcie_ip_bar1_0_read,                                         //                                                      .read
		output wire [63:0] pcie_ip_bar1_0_readdata,                                     //                                                      .readdata
		output wire        pcie_ip_bar1_0_readdatavalid,                                //                                                      .readdatavalid
		input  wire        pcie_ip_bar1_0_write,                                        //                                                      .write
		input  wire [63:0] pcie_ip_bar1_0_writedata,                                    //                                                      .writedata
		output wire [2:0]  user_module_0_avalon_slave_0_address,                        //                          user_module_0_avalon_slave_0.address
		output wire        user_module_0_avalon_slave_0_write,                          //                                                      .write
		output wire        user_module_0_avalon_slave_0_read,                           //                                                      .read
		input  wire [31:0] user_module_0_avalon_slave_0_readdata,                       //                                                      .readdata
		output wire [31:0] user_module_0_avalon_slave_0_writedata,                      //                                                      .writedata
		output wire        user_module_0_avalon_slave_0_chipselect                      //                                                      .chipselect
	);

	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest;   // pcie_ip_bar1_0_agent:av_waitrequest -> pcie_ip_bar1_0_translator:uav_waitrequest
	wire    [9:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount;    // pcie_ip_bar1_0_translator:uav_burstcount -> pcie_ip_bar1_0_agent:av_burstcount
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata;     // pcie_ip_bar1_0_translator:uav_writedata -> pcie_ip_bar1_0_agent:av_writedata
	wire   [31:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_address;       // pcie_ip_bar1_0_translator:uav_address -> pcie_ip_bar1_0_agent:av_address
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_lock;          // pcie_ip_bar1_0_translator:uav_lock -> pcie_ip_bar1_0_agent:av_lock
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_write;         // pcie_ip_bar1_0_translator:uav_write -> pcie_ip_bar1_0_agent:av_write
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_read;          // pcie_ip_bar1_0_translator:uav_read -> pcie_ip_bar1_0_agent:av_read
	wire   [63:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata;      // pcie_ip_bar1_0_agent:av_readdata -> pcie_ip_bar1_0_translator:uav_readdata
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess;   // pcie_ip_bar1_0_translator:uav_debugaccess -> pcie_ip_bar1_0_agent:av_debugaccess
	wire    [7:0] pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable;    // pcie_ip_bar1_0_translator:uav_byteenable -> pcie_ip_bar1_0_agent:av_byteenable
	wire          pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid; // pcie_ip_bar1_0_agent:av_readdatavalid -> pcie_ip_bar1_0_translator:uav_readdatavalid
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> pcie_ip_bar1_0_agent:rp_endofpacket
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> pcie_ip_bar1_0_agent:rp_valid
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> pcie_ip_bar1_0_agent:rp_startofpacket
	wire  [144:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> pcie_ip_bar1_0_agent:rp_data
	wire    [0:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> pcie_ip_bar1_0_agent:rp_channel
	wire          rsp_mux_src_ready;                                                 // pcie_ip_bar1_0_agent:rp_ready -> rsp_mux:src_ready
	wire          user_module_0_avalon_slave_0_agent_m0_waitrequest;                 // user_module_0_avalon_slave_0_translator:uav_waitrequest -> user_module_0_avalon_slave_0_agent:m0_waitrequest
	wire    [2:0] user_module_0_avalon_slave_0_agent_m0_burstcount;                  // user_module_0_avalon_slave_0_agent:m0_burstcount -> user_module_0_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] user_module_0_avalon_slave_0_agent_m0_writedata;                   // user_module_0_avalon_slave_0_agent:m0_writedata -> user_module_0_avalon_slave_0_translator:uav_writedata
	wire   [31:0] user_module_0_avalon_slave_0_agent_m0_address;                     // user_module_0_avalon_slave_0_agent:m0_address -> user_module_0_avalon_slave_0_translator:uav_address
	wire          user_module_0_avalon_slave_0_agent_m0_write;                       // user_module_0_avalon_slave_0_agent:m0_write -> user_module_0_avalon_slave_0_translator:uav_write
	wire          user_module_0_avalon_slave_0_agent_m0_lock;                        // user_module_0_avalon_slave_0_agent:m0_lock -> user_module_0_avalon_slave_0_translator:uav_lock
	wire          user_module_0_avalon_slave_0_agent_m0_read;                        // user_module_0_avalon_slave_0_agent:m0_read -> user_module_0_avalon_slave_0_translator:uav_read
	wire   [31:0] user_module_0_avalon_slave_0_agent_m0_readdata;                    // user_module_0_avalon_slave_0_translator:uav_readdata -> user_module_0_avalon_slave_0_agent:m0_readdata
	wire          user_module_0_avalon_slave_0_agent_m0_readdatavalid;               // user_module_0_avalon_slave_0_translator:uav_readdatavalid -> user_module_0_avalon_slave_0_agent:m0_readdatavalid
	wire          user_module_0_avalon_slave_0_agent_m0_debugaccess;                 // user_module_0_avalon_slave_0_agent:m0_debugaccess -> user_module_0_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] user_module_0_avalon_slave_0_agent_m0_byteenable;                  // user_module_0_avalon_slave_0_agent:m0_byteenable -> user_module_0_avalon_slave_0_translator:uav_byteenable
	wire          user_module_0_avalon_slave_0_agent_rf_source_endofpacket;          // user_module_0_avalon_slave_0_agent:rf_source_endofpacket -> user_module_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          user_module_0_avalon_slave_0_agent_rf_source_valid;                // user_module_0_avalon_slave_0_agent:rf_source_valid -> user_module_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire          user_module_0_avalon_slave_0_agent_rf_source_startofpacket;        // user_module_0_avalon_slave_0_agent:rf_source_startofpacket -> user_module_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] user_module_0_avalon_slave_0_agent_rf_source_data;                 // user_module_0_avalon_slave_0_agent:rf_source_data -> user_module_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          user_module_0_avalon_slave_0_agent_rf_source_ready;                // user_module_0_avalon_slave_0_agent_rsp_fifo:in_ready -> user_module_0_avalon_slave_0_agent:rf_source_ready
	wire          user_module_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;       // user_module_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> user_module_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          user_module_0_avalon_slave_0_agent_rsp_fifo_out_valid;             // user_module_0_avalon_slave_0_agent_rsp_fifo:out_valid -> user_module_0_avalon_slave_0_agent:rf_sink_valid
	wire          user_module_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;     // user_module_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> user_module_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [109:0] user_module_0_avalon_slave_0_agent_rsp_fifo_out_data;              // user_module_0_avalon_slave_0_agent_rsp_fifo:out_data -> user_module_0_avalon_slave_0_agent:rf_sink_data
	wire          user_module_0_avalon_slave_0_agent_rsp_fifo_out_ready;             // user_module_0_avalon_slave_0_agent:rf_sink_ready -> user_module_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          user_module_0_avalon_slave_0_agent_rdata_fifo_src_valid;           // user_module_0_avalon_slave_0_agent:rdata_fifo_src_valid -> user_module_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] user_module_0_avalon_slave_0_agent_rdata_fifo_src_data;            // user_module_0_avalon_slave_0_agent:rdata_fifo_src_data -> user_module_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          user_module_0_avalon_slave_0_agent_rdata_fifo_src_ready;           // user_module_0_avalon_slave_0_agent_rdata_fifo:in_ready -> user_module_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          user_module_0_avalon_slave_0_agent_rdata_fifo_out_valid;           // user_module_0_avalon_slave_0_agent_rdata_fifo:out_valid -> user_module_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] user_module_0_avalon_slave_0_agent_rdata_fifo_out_data;            // user_module_0_avalon_slave_0_agent_rdata_fifo:out_data -> user_module_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          user_module_0_avalon_slave_0_agent_rdata_fifo_out_ready;           // user_module_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> user_module_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          pcie_ip_bar1_0_agent_cp_endofpacket;                               // pcie_ip_bar1_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          pcie_ip_bar1_0_agent_cp_valid;                                     // pcie_ip_bar1_0_agent:cp_valid -> router:sink_valid
	wire          pcie_ip_bar1_0_agent_cp_startofpacket;                             // pcie_ip_bar1_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [144:0] pcie_ip_bar1_0_agent_cp_data;                                      // pcie_ip_bar1_0_agent:cp_data -> router:sink_data
	wire          pcie_ip_bar1_0_agent_cp_ready;                                     // router:sink_ready -> pcie_ip_bar1_0_agent:cp_ready
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [144:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire    [0:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire          user_module_0_avalon_slave_0_agent_rp_endofpacket;                 // user_module_0_avalon_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          user_module_0_avalon_slave_0_agent_rp_valid;                       // user_module_0_avalon_slave_0_agent:rp_valid -> router_001:sink_valid
	wire          user_module_0_avalon_slave_0_agent_rp_startofpacket;               // user_module_0_avalon_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [108:0] user_module_0_avalon_slave_0_agent_rp_data;                        // user_module_0_avalon_slave_0_agent:rp_data -> router_001:sink_data
	wire          user_module_0_avalon_slave_0_agent_rp_ready;                       // router_001:sink_ready -> user_module_0_avalon_slave_0_agent:rp_ready
	wire          user_module_0_avalon_slave_0_burst_adapter_source0_endofpacket;    // user_module_0_avalon_slave_0_burst_adapter:source0_endofpacket -> user_module_0_avalon_slave_0_agent:cp_endofpacket
	wire          user_module_0_avalon_slave_0_burst_adapter_source0_valid;          // user_module_0_avalon_slave_0_burst_adapter:source0_valid -> user_module_0_avalon_slave_0_agent:cp_valid
	wire          user_module_0_avalon_slave_0_burst_adapter_source0_startofpacket;  // user_module_0_avalon_slave_0_burst_adapter:source0_startofpacket -> user_module_0_avalon_slave_0_agent:cp_startofpacket
	wire  [108:0] user_module_0_avalon_slave_0_burst_adapter_source0_data;           // user_module_0_avalon_slave_0_burst_adapter:source0_data -> user_module_0_avalon_slave_0_agent:cp_data
	wire          user_module_0_avalon_slave_0_burst_adapter_source0_ready;          // user_module_0_avalon_slave_0_agent:cp_ready -> user_module_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [0:0] user_module_0_avalon_slave_0_burst_adapter_source0_channel;        // user_module_0_avalon_slave_0_burst_adapter:source0_channel -> user_module_0_avalon_slave_0_agent:cp_channel
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> user_module_0_avalon_slave_0_rsp_width_adapter:in_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> user_module_0_avalon_slave_0_rsp_width_adapter:in_valid
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> user_module_0_avalon_slave_0_rsp_width_adapter:in_startofpacket
	wire  [108:0] router_001_src_data;                                               // router_001:src_data -> user_module_0_avalon_slave_0_rsp_width_adapter:in_data
	wire    [0:0] router_001_src_channel;                                            // router_001:src_channel -> user_module_0_avalon_slave_0_rsp_width_adapter:in_channel
	wire          router_001_src_ready;                                              // user_module_0_avalon_slave_0_rsp_width_adapter:in_ready -> router_001:src_ready
	wire          user_module_0_avalon_slave_0_rsp_width_adapter_src_endofpacket;    // user_module_0_avalon_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          user_module_0_avalon_slave_0_rsp_width_adapter_src_valid;          // user_module_0_avalon_slave_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire          user_module_0_avalon_slave_0_rsp_width_adapter_src_startofpacket;  // user_module_0_avalon_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire  [144:0] user_module_0_avalon_slave_0_rsp_width_adapter_src_data;           // user_module_0_avalon_slave_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          user_module_0_avalon_slave_0_rsp_width_adapter_src_ready;          // rsp_demux:sink_ready -> user_module_0_avalon_slave_0_rsp_width_adapter:out_ready
	wire    [0:0] user_module_0_avalon_slave_0_rsp_width_adapter_src_channel;        // user_module_0_avalon_slave_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> user_module_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> user_module_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> user_module_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire  [144:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> user_module_0_avalon_slave_0_cmd_width_adapter:in_data
	wire    [0:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> user_module_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_ready;                                                 // user_module_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire          user_module_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;    // user_module_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> user_module_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          user_module_0_avalon_slave_0_cmd_width_adapter_src_valid;          // user_module_0_avalon_slave_0_cmd_width_adapter:out_valid -> user_module_0_avalon_slave_0_burst_adapter:sink0_valid
	wire          user_module_0_avalon_slave_0_cmd_width_adapter_src_startofpacket;  // user_module_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> user_module_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire  [108:0] user_module_0_avalon_slave_0_cmd_width_adapter_src_data;           // user_module_0_avalon_slave_0_cmd_width_adapter:out_data -> user_module_0_avalon_slave_0_burst_adapter:sink0_data
	wire          user_module_0_avalon_slave_0_cmd_width_adapter_src_ready;          // user_module_0_avalon_slave_0_burst_adapter:sink0_ready -> user_module_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire    [0:0] user_module_0_avalon_slave_0_cmd_width_adapter_src_channel;        // user_module_0_avalon_slave_0_cmd_width_adapter:out_channel -> user_module_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> crosser:in_valid
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire  [144:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> crosser:in_data
	wire    [0:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_ready;                                              // crosser:in_ready -> cmd_demux:src0_ready
	wire          crosser_out_endofpacket;                                           // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          crosser_out_valid;                                                 // crosser:out_valid -> cmd_mux:sink0_valid
	wire          crosser_out_startofpacket;                                         // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [144:0] crosser_out_data;                                                  // crosser:out_data -> cmd_mux:sink0_data
	wire    [0:0] crosser_out_channel;                                               // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_ready;                                                 // cmd_mux:sink0_ready -> crosser:out_ready
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> crosser_001:in_valid
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [144:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> crosser_001:in_data
	wire    [0:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_ready;                                              // crosser_001:in_ready -> rsp_demux:src0_ready
	wire          crosser_001_out_endofpacket;                                       // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          crosser_001_out_valid;                                             // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire          crosser_001_out_startofpacket;                                     // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [144:0] crosser_001_out_data;                                              // crosser_001:out_data -> rsp_mux:sink0_data
	wire    [0:0] crosser_001_out_channel;                                           // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_ready;                                             // rsp_mux:sink0_ready -> crosser_001:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_ip_bar1_0_translator (
		.clk                      (pcie_ip_pcie_core_clk_clk),                                         //                       clk.clk
		.reset                    (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address              (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (pcie_ip_bar1_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (pcie_ip_bar1_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (pcie_ip_bar1_0_burstcount),                                         //                          .burstcount
		.av_byteenable            (pcie_ip_bar1_0_byteenable),                                         //                          .byteenable
		.av_read                  (pcie_ip_bar1_0_read),                                               //                          .read
		.av_readdata              (pcie_ip_bar1_0_readdata),                                           //                          .readdata
		.av_readdatavalid         (pcie_ip_bar1_0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (pcie_ip_bar1_0_write),                                              //                          .write
		.av_writedata             (pcie_ip_bar1_0_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.av_debugaccess           (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) user_module_0_avalon_slave_0_translator (
		.clk                      (clk_50_clk_clk),                                      //                      clk.clk
		.reset                    (user_module_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address              (user_module_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (user_module_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (user_module_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (user_module_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (user_module_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (user_module_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (user_module_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (user_module_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (user_module_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (user_module_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (user_module_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (user_module_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (user_module_0_avalon_slave_0_write),                  //                         .write
		.av_read                  (user_module_0_avalon_slave_0_read),                   //                         .read
		.av_readdata              (user_module_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (user_module_0_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (user_module_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BEGIN_BURST           (128),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_BURST_TYPE_H          (125),
		.PKT_BURST_TYPE_L          (124),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (130),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (131),
		.PKT_THREAD_ID_H           (132),
		.PKT_THREAD_ID_L           (132),
		.PKT_CACHE_H               (139),
		.PKT_CACHE_L               (136),
		.PKT_DATA_SIDEBAND_H       (127),
		.PKT_DATA_SIDEBAND_L       (127),
		.PKT_QOS_H                 (129),
		.PKT_QOS_L                 (129),
		.PKT_ADDR_SIDEBAND_H       (126),
		.PKT_ADDR_SIDEBAND_L       (126),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_ORI_BURST_SIZE_H      (144),
		.ST_DATA_W                 (145),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_ip_bar1_0_agent (
		.clk                     (pcie_ip_pcie_core_clk_clk),                                         //       clk.clk
		.reset                   (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address              (pcie_ip_bar1_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (pcie_ip_bar1_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (pcie_ip_bar1_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (pcie_ip_bar1_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (pcie_ip_bar1_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (pcie_ip_bar1_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (pcie_ip_bar1_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (pcie_ip_bar1_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (pcie_ip_bar1_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (pcie_ip_bar1_0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (pcie_ip_bar1_0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (pcie_ip_bar1_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (pcie_ip_bar1_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (pcie_ip_bar1_0_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                  //          .data
		.rp_channel              (rsp_mux_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                 //          .ready
		.av_response             (),                                                                  // (terminated)
		.av_writeresponserequest (1'b0),                                                              // (terminated)
		.av_writeresponsevalid   ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (92),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (95),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) user_module_0_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (user_module_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (user_module_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (user_module_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (user_module_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (user_module_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (user_module_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (user_module_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (user_module_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (user_module_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (user_module_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (user_module_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (user_module_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (user_module_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (user_module_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (user_module_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (user_module_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (user_module_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (user_module_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (user_module_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (user_module_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (user_module_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (user_module_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (user_module_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (user_module_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (user_module_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (user_module_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (user_module_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (user_module_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (user_module_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (user_module_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (user_module_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (user_module_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (user_module_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (user_module_0_avalon_slave_0_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (user_module_0_avalon_slave_0_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (user_module_0_avalon_slave_0_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (user_module_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (user_module_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (user_module_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) user_module_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                //       clk.clk
		.reset             (user_module_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (user_module_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (user_module_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (user_module_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (user_module_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (user_module_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (user_module_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (user_module_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (user_module_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (user_module_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (user_module_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) user_module_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                          //       clk.clk
		.reset             (user_module_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (user_module_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (user_module_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (user_module_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (user_module_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (user_module_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (user_module_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_router router (
		.sink_ready         (pcie_ip_bar1_0_agent_cp_ready),                               //      sink.ready
		.sink_valid         (pcie_ip_bar1_0_agent_cp_valid),                               //          .valid
		.sink_data          (pcie_ip_bar1_0_agent_cp_data),                                //          .data
		.sink_startofpacket (pcie_ip_bar1_0_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_ip_bar1_0_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                            //       src.ready
		.src_valid          (router_src_valid),                                            //          .valid
		.src_data           (router_src_data),                                             //          .data
		.src_channel        (router_src_channel),                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (user_module_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (user_module_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (user_module_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (user_module_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (user_module_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                      //       clk.clk
		.reset              (user_module_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) user_module_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                   //       cr0.clk
		.reset                 (user_module_0_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (user_module_0_avalon_slave_0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (user_module_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (user_module_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (user_module_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (user_module_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (user_module_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (user_module_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (user_module_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (user_module_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (user_module_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (user_module_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (user_module_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset              (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                            //      sink.ready
		.sink_channel       (router_src_channel),                                          //          .channel
		.sink_data          (router_src_data),                                             //          .data
		.sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                   //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                  //       clk.clk
		.reset               (user_module_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                               //          .valid
		.sink0_channel       (crosser_out_channel),                             //          .channel
		.sink0_data          (crosser_out_data),                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                          //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (user_module_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (user_module_0_avalon_slave_0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (user_module_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (user_module_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (user_module_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (user_module_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (user_module_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	amm_master_qsys_with_pcie_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (pcie_ip_pcie_core_clk_clk),                                   //       clk.clk
		.reset               (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                                           //          .valid
		.src_data            (rsp_mux_src_data),                                            //          .data
		.src_channel         (rsp_mux_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                                     //          .channel
		.sink0_data          (crosser_001_out_data),                                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (145),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) user_module_0_avalon_slave_0_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                                   //       clk.clk
		.reset                (user_module_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_001_src_valid),                                             //      sink.valid
		.in_channel           (router_001_src_channel),                                           //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_001_src_ready),                                             //          .ready
		.in_data              (router_001_src_data),                                              //          .data
		.out_endofpacket      (user_module_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (user_module_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (user_module_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (user_module_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (user_module_0_avalon_slave_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (user_module_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (145),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) user_module_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                                   //       clk.clk
		.reset                (user_module_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                //          .ready
		.in_data              (cmd_mux_src_data),                                                 //          .data
		.out_endofpacket      (user_module_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (user_module_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (user_module_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (user_module_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (user_module_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (user_module_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (145),
		.BITS_PER_SYMBOL     (145),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pcie_ip_pcie_core_clk_clk),                                   //        in_clk.clk
		.in_reset          (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                              //       out_clk.clk
		.out_reset         (user_module_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_src0_data),                                         //              .data
		.out_ready         (crosser_out_ready),                                           //           out.ready
		.out_valid         (crosser_out_valid),                                           //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_out_channel),                                         //              .channel
		.out_data          (crosser_out_data),                                            //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (145),
		.BITS_PER_SYMBOL     (145),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                              //        in_clk.clk
		.in_reset          (user_module_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (pcie_ip_pcie_core_clk_clk),                                   //       out_clk.clk
		.out_reset         (pcie_ip_bar1_0_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                        //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                        //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                      //              .channel
		.in_data           (rsp_demux_src0_data),                                         //              .data
		.out_ready         (crosser_001_out_ready),                                       //           out.ready
		.out_valid         (crosser_001_out_valid),                                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                     //              .channel
		.out_data          (crosser_001_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

endmodule
